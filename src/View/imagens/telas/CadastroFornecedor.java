package View.imagens.telas;

import Classes.Fornecedor;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;

public class CadastroFornecedor extends javax.swing.JFrame {

    private final String[] tableColumns = {"Id Fornecedor", "Razão Social", "CNPJ", "Telefone Fixo", "Celular", "Email", "Endereço", "Bairro", "CEP", "Cidade"};
    DefaultTableModel tableModel = new DefaultTableModel(tableColumns, 0);
    private final ArrayList<Fornecedor> listaFornecedor = new ArrayList<>();

    public CadastroFornecedor() {
        initComponents();
        jTableFornecedor.setModel(tableModel);
        loadData();
        geraAcessbilidade();

        setTitle("Cadastro de Fornecedores");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    private void geraAcessbilidade() {

        // Definindo atalhos para botões
        jButtonSalvar.setMnemonic(KeyEvent.VK_S);
        jButtonLimpar.setMnemonic(KeyEvent.VK_L);
        jButtonPesquisar.setMnemonic(KeyEvent.VK_P);
        jButtonExcluir.setMnemonic(KeyEvent.VK_E);
        jButtonVoltar.setMnemonic(KeyEvent.VK_V);

        // Adicionando tooltips com informações dos atalhos
        jButtonSalvar.setToolTipText("Salvar (Alt+S)");
        jButtonLimpar.setToolTipText("Limpar (Alt+L)");
        jButtonPesquisar.setToolTipText("Limpar (Alt+L)");
        jButtonExcluir.setToolTipText("Excluir (Alt+E)");
        jButtonVoltar.setToolTipText("Sair (Alt+V)");

        // Adicionando tooltips aos campos de texto
        jTextRazaoSocial.setToolTipText("Insira o nome da Razão Social");
        jTextCNPJ.setToolTipText("Insira o CNPJ(XX.XXX.XXX/XXX-XX) do Fornecedor ");
        jTextTelefoneFixo.setToolTipText("Insira o telefone((XX)XXXXX-XXXX) fixo do cliente");
        jTextCelular.setToolTipText("Insira o celular do cliente");
        jTextEmail.setToolTipText("Insira o email do cliente");
        jTextEndereco.setToolTipText("Insira o endereço do cliente");
        jTextBairro.setToolTipText("Insira o bairro do cliente");
        jTextCep.setToolTipText("Insira o CEP do cliente");
        jTextCidade.setToolTipText("Insira a Cidade do cliente");

        // Definindo a ordem de foco
        jTextRazaoSocial.setNextFocusableComponent(jTextCNPJ);
        jTextCNPJ.setNextFocusableComponent(jTextTelefoneFixo);
        jTextTelefoneFixo.setNextFocusableComponent(jTextCelular);
        jTextCelular.setNextFocusableComponent(jTextEmail);
        jTextEmail.setNextFocusableComponent(jTextEndereco);
        jTextEndereco.setNextFocusableComponent(jTextBairro);
        jTextBairro.setNextFocusableComponent(jTextCep);
        jTextCep.setNextFocusableComponent(jTextCidade);
        jTextCidade.setNextFocusableComponent(jButtonSalvar);
        jButtonSalvar.setNextFocusableComponent(jButtonLimpar);
        jButtonLimpar.setNextFocusableComponent(jButtonPesquisar);
        jButtonPesquisar.setNextFocusableComponent(jButtonExcluir);
        jButtonExcluir.setNextFocusableComponent(jButtonVoltar);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jTextRazaoSocial = new javax.swing.JTextField();
        jTextEndereco = new javax.swing.JTextField();
        jTextBairro = new javax.swing.JTextField();
        jTextEmail = new javax.swing.JTextField();
        jTextCidade = new javax.swing.JTextField();
        jTextCNPJ = new javax.swing.JFormattedTextField();
        jTextTelefoneFixo = new javax.swing.JFormattedTextField();
        jTextCelular = new javax.swing.JFormattedTextField();
        jTextCep = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableFornecedor = new javax.swing.JTable();
        jButtonSalvar = new javax.swing.JButton();
        jButtonLimpar = new javax.swing.JButton();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonExcluir = new javax.swing.JButton();
        jButtonVoltar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cadastro de Fornecedor", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18), new java.awt.Color(51, 102, 255))); // NOI18N
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados Pessoais", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 0, 14), new java.awt.Color(255, 51, 51))); // NOI18N

        jLabel26.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel26.setText("Razão Social:");

        jLabel27.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel27.setText("CNPJ:");

        jLabel29.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel29.setText("Endereço:");

        jLabel30.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel30.setText("Bairro:");

        jLabel32.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel32.setText("CEP:");

        jLabel33.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel33.setText("Telefone Fixo:");

        jLabel34.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel34.setText("Celular:");

        jLabel35.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel35.setText("Email:");

        jLabel36.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel36.setText("Cidade:");

        jTextRazaoSocial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextRazaoSocial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextRazaoSocialActionPerformed(evt);
            }
        });

        jTextEndereco.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jTextBairro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jTextEmail.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jTextCidade.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCidadeActionPerformed(evt);
            }
        });

        try {
            jTextCNPJ.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###/####-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTextTelefoneFixo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTextCelular.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTextCep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("######-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextRazaoSocial)
                        .addGap(33, 33, 33)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel33)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextTelefoneFixo, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel34)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextCelular))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextCep, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel6Layout.createSequentialGroup()
                                                .addGap(163, 163, 163)
                                                .addComponent(jLabel36)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTextEndereco))))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35)
                            .addComponent(jLabel30))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                            .addComponent(jTextBairro))))
                .addGap(25, 25, 25))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jTextRazaoSocial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(jTextCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(jLabel34)
                    .addComponent(jLabel35)
                    .addComponent(jTextEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextTelefoneFixo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(jTextEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30)
                    .addComponent(jTextBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36)
                    .addComponent(jTextCep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32))
                .addGap(49, 49, 49))
        );

        jPanel5.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 1070, 240));

        jTableFornecedor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id Fornecedor", "Razão Social", "CNPJ", "Telefone Fixo", "Celular", "Email", "Endereço", "Bairro", "CEP", "Cidade"
            }
        ));
        jScrollPane3.setViewportView(jTableFornecedor);

        jTabbedPane1.addTab("Fornecedores", jScrollPane3);

        jScrollPane1.setViewportView(jTabbedPane1);

        jPanel5.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, 1270, 410));

        jButtonSalvar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonSalvar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonSalvar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });
        jPanel5.add(jButtonSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 290, 140, 30));

        jButtonLimpar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonLimpar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonLimpar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonLimpar.setText("Limpar");
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });
        jPanel5.add(jButtonLimpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 290, 150, 30));

        jButtonPesquisar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonPesquisar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonPesquisar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });
        jPanel5.add(jButtonPesquisar, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 290, 160, 30));

        jButtonExcluir.setBackground(new java.awt.Color(226, 218, 218));
        jButtonExcluir.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonExcluir.setForeground(new java.awt.Color(41, 83, 241));
        jButtonExcluir.setText("Excluir");
        jButtonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirActionPerformed(evt);
            }
        });
        jPanel5.add(jButtonExcluir, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 290, 160, 30));

        jButtonVoltar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonVoltar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonVoltar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonVoltar.setText("Voltar");
        jButtonVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVoltarActionPerformed(evt);
            }
        });
        jPanel5.add(jButtonVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 290, 170, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/imagens/telas/fundo de tela.png"))); // NOI18N
        jPanel5.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 29, 1300, 740));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextRazaoSocialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextRazaoSocialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextRazaoSocialActionPerformed

    private void jTextCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCidadeActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed

        // Verifica se os campos obrigatórios estão preenchidos
        if (!emptyFields()) {
            // Cria um objeto Fornecedor com os dados dos campos
            Fornecedor fornecedor = getFornecedor();
            if (fornecedor != null) {
                inserirFornecedor(fornecedor);
                salvarRegistrosEmArquivo("registros.csv");
            }

            // Recarregar os dados na tabela
            loadData();

            // Limpa os campos de entrada
            jTextRazaoSocial.setText("");
            jTextCNPJ.setText("");
            jTextTelefoneFixo.setText("");
            jTextCelular.setText("");
            jTextEmail.setText("");
            jTextEndereco.setText("");
            jTextBairro.setText("");
            jTextCep.setText("");
            jTextCidade.setText("");

            jTextRazaoSocial.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "Preencha todos os campos obrigatórios.");
        }
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed

        jTextRazaoSocial.setText("");
        jTextCNPJ.setText("");
        jTextTelefoneFixo.setText("");
        jTextCelular.setText("");
        jTextEmail.setText("");
        jTextEndereco.setText("");
        jTextBairro.setText("");
        jTextCep.setText("");
        jTextCidade.setText("");

        jTextRazaoSocial.requestFocus();

    }//GEN-LAST:event_jButtonLimparActionPerformed

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed

      // Exibe uma caixa de diálogo para o usuário digitar o nome do fornecedor
    String filtroFornecedor = JOptionPane.showInputDialog(null, "Digite a razão social do fornecedor que deseja pesquisar:");

    if (filtroFornecedor != null && !filtroFornecedor.trim().isEmpty()) {
        try {
            // Conexão com o banco de dados
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/distribuidora_de_agua", "root", "T#7aB3$0m2@i");

            // Preparar a consulta SQL para buscar fornecedores pela razão social
            String sql = "SELECT f.idfornecedor, f.razao_social, f.cnpj, f.telefone_fixo, f.celular, f.email, "
                    + "e.endereco, e.bairro, e.cep, e.cidade "
                    + "FROM fornecedor f "
                    + "JOIN endereco e ON f.endereco_idendereco = e.idendereco "
                    + "WHERE f.razao_social LIKE ?";

            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, "%" + filtroFornecedor.trim() + "%");  // Usar LIKE para busca parcial

            ResultSet rs = ps.executeQuery();

            // Obter o modelo da tabela para preencher os dados
            DefaultTableModel model = (DefaultTableModel) jTableFornecedor.getModel();
            model.setRowCount(0);  // Limpa a tabela antes de adicionar os novos dados

            if (!rs.next()) {  // Verifica se o ResultSet está vazio
                JOptionPane.showMessageDialog(null, "Nenhum fornecedor encontrado para a razão social informada!");
            } else {
                // Se houver resultados, adicionar ao modelo da tabela
                do {
                    Object[] rowData = new Object[model.getColumnCount()];  // Ajustar o número de colunas de acordo com o modelo da tabela
                    rowData[0] = rs.getInt("idfornecedor");      // ID Fornecedor
                    rowData[1] = rs.getString("razao_social");   // Razão Social
                    rowData[2] = rs.getString("cnpj");           // CNPJ
                    rowData[3] = rs.getString("telefone_fixo");  // Telefone Fixo
                    rowData[4] = rs.getString("celular");        // Celular
                    rowData[5] = rs.getString("email");          // Email
                    rowData[6] = rs.getString("endereco");       // Endereço
                    rowData[7] = rs.getString("bairro");         // Bairro
                    rowData[8] = rs.getString("cep");            // CEP
                    rowData[9] = rs.getString("cidade");         // Cidade

                    // Adicionar a linha ao modelo da tabela
                    model.addRow(rowData);
                } while (rs.next());
            }

            // Fechar a consulta e a conexão
            ps.close();
            conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao buscar fornecedores: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, insira a razão social de um fornecedor para filtrar.");
    }
    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirActionPerformed
// Obter a linha selecionada na tabela
    int rowIndex = jTableFornecedor.getSelectedRow();

    // Verificar se há uma linha selecionada
    if (rowIndex >= 0) {
        // Confirmar a exclusão
        String[] options = {"Sim", "Não"};
        int deletar = JOptionPane.showOptionDialog(
                rootPane,
                "Tem certeza que deseja excluir o Registro?",
                "Exclusão Registro de Fornecedor",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]
        );

        // Se o usuário confirmar a exclusão
        if (deletar == 0) {
            // Obter o ID do fornecedor da tabela
            String idString = jTableFornecedor.getValueAt(rowIndex, 0).toString();
            int fornecedorId = Integer.parseInt(idString);

            String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
            String user = "root";
            String password = "T#7aB3$0m2@i";

            try (Connection connection = DriverManager.getConnection(url, user, password)) {
                // Obter o ID do endereço associado ao fornecedor
                String sqlObterEndereco = "SELECT endereco_idendereco FROM Fornecedor WHERE idfornecedor = ?";
                int enderecoId = -1;
                try (PreparedStatement statementObterEndereco = connection.prepareStatement(sqlObterEndereco)) {
                    statementObterEndereco.setInt(1, fornecedorId);
                    try (ResultSet rs = statementObterEndereco.executeQuery()) {
                        if (rs.next()) {
                            enderecoId = rs.getInt("endereco_idendereco");
                        }
                    }
                }

                // Excluir o fornecedor da tabela Fornecedor
                String sqlFornecedor = "DELETE FROM Fornecedor WHERE idfornecedor = ?";
                try (PreparedStatement statementFornecedor = connection.prepareStatement(sqlFornecedor)) {
                    statementFornecedor.setInt(1, fornecedorId);
                    int affectedRows = statementFornecedor.executeUpdate();

                    if (affectedRows > 0 && enderecoId != -1) {
                        // Excluir o endereço associado ao fornecedor
                        String sqlEndereco = "DELETE FROM Endereco WHERE idendereco = ?";
                        try (PreparedStatement statementEndereco = connection.prepareStatement(sqlEndereco)) {
                            statementEndereco.setInt(1, enderecoId);
                            statementEndereco.executeUpdate();
                        }

                        JOptionPane.showMessageDialog(rootPane, "Fornecedor excluído com sucesso.");

                        // Atualizar a tabela para refletir a exclusão
                        atualizarTabela();
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Erro ao excluir fornecedor.");
                    }
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Erro ao excluir fornecedor: " + ex.getMessage());
            }
        }
    } else {
        JOptionPane.showMessageDialog(rootPane, "Selecione um fornecedor para excluir.");
    }


    }//GEN-LAST:event_jButtonExcluirActionPerformed

    private void jButtonVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVoltarActionPerformed

        MenuPrincipal menuPrincipal = new MenuPrincipal();
        menuPrincipal.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_jButtonVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroFornecedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CadastroFornecedor().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JButton jButtonVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableFornecedor;
    private javax.swing.JTextField jTextBairro;
    private javax.swing.JFormattedTextField jTextCNPJ;
    private javax.swing.JFormattedTextField jTextCelular;
    private javax.swing.JFormattedTextField jTextCep;
    private javax.swing.JTextField jTextCidade;
    private javax.swing.JTextField jTextEmail;
    private javax.swing.JTextField jTextEndereco;
    private javax.swing.JTextField jTextRazaoSocial;
    private javax.swing.JFormattedTextField jTextTelefoneFixo;
    // End of variables declaration//GEN-END:variables
 // Método para verificar campos vazios
    private boolean emptyFields() {
        boolean empty = true;

        if (jTextRazaoSocial.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Razão Social não pode ser vazia.");
        } else if (jTextCNPJ.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! CNPJ não pode ser vazio.");
        } else if (jTextTelefoneFixo.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Telefone Fixo não pode ser vazio.");
        } else if (jTextCelular.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Celular não pode ser vazio.");
        } else if (jTextEndereco.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Endereço não pode ser vazio.");
        } else if (jTextBairro.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Bairro não pode ser vazio.");
        } else if (jTextCep.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! CEP não pode ser vazio.");
        } else if (jTextCidade.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Cidade não pode ser vazia.");
        } else {
            empty = false;
        }

        return empty;
    }

    // Método para obter conexão ao banco de dados
    private Connection getConnection() {
        String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
        String user = "root";
        String password = "T#7aB3$0m2@i";
        try {
            return DriverManager.getConnection(url, user, password);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao conectar ao banco de dados: " + e.getMessage());
            throw new RuntimeException("Erro ao conectar ao banco de dados.", e);
        }
    }

    // Verifica se o fornecedor já existe no banco de dados com base no CNPJ
    private boolean fornecedorExiste(String cnpj) throws SQLException {
        String sql = "SELECT COUNT(*) FROM fornecedor WHERE cnpj = ?";
        try (Connection conn = getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, cnpj);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0; // Retorna true se o fornecedor já existir
                }
            }
        }
        return false;
    }

    // Carrega os dados da tabela fornecedor
    private void loadData() {
        String sql = "SELECT f.idfornecedor, f.razao_social, f.cnpj, f.telefone_fixo, f.celular, f.email, "
                   + "e.endereco, e.bairro, e.cep, e.cidade "
                   + "FROM fornecedor f "
                   + "JOIN endereco e ON f.endereco_idendereco = e.idendereco";

        try (Connection conn = getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            tableModel.setRowCount(0); // Limpa qualquer dado existente na tabela
            int rowCount = 0; // Contador de linhas adicionadas
            while (rs.next()) {
                Object[] rowData = new Object[10];
                rowData[0] = rs.getInt("idfornecedor");
                rowData[1] = rs.getString("razao_social");
                rowData[2] = rs.getString("cnpj");
                rowData[3] = rs.getString("telefone_fixo");
                rowData[4] = rs.getString("celular");
                rowData[5] = rs.getString("email");
                rowData[6] = rs.getString("endereco");
                rowData[7] = rs.getString("bairro");
                rowData[8] = rs.getString("cep");
                rowData[9] = rs.getString("cidade");

                tableModel.addRow(rowData);
                rowCount++;
            }
            System.out.println("Dados carregados com sucesso. Total de registros: " + rowCount);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar os dados: " + e.getMessage());
        }
    }

    // Obtém os dados do fornecedor preenchidos no formulário
    private Fornecedor getFornecedor() {
        if (!emptyFields()
                && validarTelefone(jTextTelefoneFixo.getText())
                && validarTelefone(jTextCelular.getText())
                && validarCNPJ(jTextCNPJ.getText())) {

            Fornecedor fornecedor = new Fornecedor();
            fornecedor.setRazaoSocial(jTextRazaoSocial.getText());
            fornecedor.setCnpj(jTextCNPJ.getText());
            fornecedor.setTelefoneFixo(jTextTelefoneFixo.getText());
            fornecedor.setCelular(jTextCelular.getText());
            fornecedor.setEmail(jTextEmail.getText());
            fornecedor.setEndereco(jTextEndereco.getText());
            fornecedor.setBairro(jTextBairro.getText());
            fornecedor.setCep(jTextCep.getText());
            fornecedor.setCidade(jTextCidade.getText());

            JOptionPane.showMessageDialog(null, """
                Os seguintes dados foram cadastrados com sucesso:
                Razão Social: """ + jTextRazaoSocial.getText()
                    + "\nCNPJ: " + jTextCNPJ.getText()
                    + "\nTelefone Fixo: " + jTextTelefoneFixo.getText()
                    + "\nCelular: " + jTextCelular.getText()
                    + "\nEmail: " + jTextEmail.getText()
                    + "\nEndereço: " + jTextEndereco.getText()
                    + "\nBairro: " + jTextBairro.getText()
                    + "\nCEP: " + jTextCep.getText()
                    + "\nCidade: " + jTextCidade.getText()
            );
            return fornecedor;
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, preencha todos os campos corretamente.");
        }
        return null;
    }

    // Inserir fornecedor no banco de dados com verificação de duplicidade
    private void inserirFornecedor(Fornecedor fornecedor) {
        try (Connection conn = getConnection()) {
            // Verifica se o fornecedor já existe com base no CNPJ
            if (fornecedorExiste(fornecedor.getCnpj())) {
                JOptionPane.showMessageDialog(null, "Fornecedor com o CNPJ " + fornecedor.getCnpj() + " já está cadastrado.");
                return; // Sai do método para evitar a inserção duplicada
            }

            int enderecoId = getEnderecoId(fornecedor.getEndereco(), fornecedor.getBairro(),
                                          fornecedor.getCep(), fornecedor.getCidade());

            String sql = "INSERT INTO fornecedor (razao_social, cnpj, telefone_fixo, celular, email, endereco_idendereco) "
                       + "VALUES (?, ?, ?, ?, ?, ?)";
            try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                ps.setString(1, fornecedor.getRazaoSocial());
                ps.setString(2, fornecedor.getCnpj());
                ps.setString(3, fornecedor.getTelefoneFixo());
                ps.setString(4, fornecedor.getCelular());
                ps.setString(5, fornecedor.getEmail());
                ps.setInt(6, enderecoId);

                int affectedRows = ps.executeUpdate();
                if (affectedRows > 0) {
                    try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            fornecedor.setIdFornecedor(generatedKeys.getInt(1));
                            listaFornecedor.add(fornecedor);
                            atualizarTabela();
                            JOptionPane.showMessageDialog(null, "Fornecedor cadastrado com sucesso!");
                        }
                    }
                } else {
                    throw new SQLException("Falha ao cadastrar fornecedor, nenhuma linha foi afetada.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao inserir o fornecedor no banco de dados: " + e.getMessage());
        }
    }

    // Obtém o ID do endereço existente ou insere um novo, se necessário
    private int getEnderecoId(String endereco, String bairro, String cep, String cidade) throws SQLException {
        try (Connection conn = getConnection()) {
            String sql = "SELECT idendereco FROM endereco WHERE endereco = ? AND bairro = ? AND cep = ? AND cidade = ?";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, endereco);
                ps.setString(2, bairro);
                ps.setString(3, cep);
                ps.setString(4, cidade);
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        return rs.getInt("idendereco");
                    }
                }
            }
        }
        // Se o endereço não existe, insere um novo
        return inserirNovoEndereco(endereco, bairro, cep, cidade);
    }

    // Insere novo endereço e retorna o ID
    private int inserirNovoEndereco(String endereco, String bairro, String cep, String cidade) throws SQLException {
        try (Connection conn = getConnection()) {
            String sql = "INSERT INTO endereco (endereco, bairro, cep, cidade) VALUES (?, ?, ?, ?)";
            try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                ps.setString(1, endereco);
                ps.setString(2, bairro);
                ps.setString(3, cep);
                ps.setString(4, cidade);
                int affectedRows = ps.executeUpdate();
                if (affectedRows == 0) {
                    throw new SQLException("Falha ao inserir novo endereço, nenhuma linha foi afetada.");
                }
                try (ResultSet generatedKeys = ps.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        return generatedKeys.getInt(1); // Retorna o ID gerado
                    } else {
                        throw new SQLException("Falha ao inserir novo endereço, ID não foi gerado.");
                    }
                }
            }
        }
    }

    // Atualiza a tabela de fornecedores
    private void atualizarTabela() {
        loadData(); // Reutilizando a função para carregar os dados
    }

    // Salva registros em arquivo
    private void salvarRegistrosEmArquivo(String nomeArquivo) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(nomeArquivo))) {
            writer.write("ID do Fornecedor,Razão Social,CNPJ,Telefone Fixo,Celular,Email,Endereço,Bairro,CEP,Cidade");
            writer.newLine();
            for (Fornecedor fornecedor : listaFornecedor) {
                writer.write(fornecedor.getIdFornecedor() + ","
                        + fornecedor.getRazaoSocial() + ","
                        + fornecedor.getCnpj() + ","
                        + fornecedor.getTelefoneFixo() + ","
                        + fornecedor.getCelular() + ","
                        + fornecedor.getEmail() + ","
                        + fornecedor.getEndereco() + ","
                        + fornecedor.getBairro() + ","
                        + fornecedor.getCep() + ","
                        + fornecedor.getCidade());
                writer.newLine();
            }
            JOptionPane.showMessageDialog(null, "Registros salvos com sucesso em " + nomeArquivo);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar registros em arquivo: " + e.getMessage());
        }
    }

    // Validação de formatos
    private boolean validarTelefone(String telefone) {
        String regex = "\\(\\d{2}\\)\\d{4}-\\d{4}|\\(\\d{2}\\)\\d{5}-\\d{4}";
        return Pattern.matches(regex, telefone);
    }

    private boolean validarCNPJ(String cnpj) {
        if (!cnpj.matches("\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}")) {
            JOptionPane.showMessageDialog(null, "Formato do CNPJ inválido. Use o formato XX.XXX.XXX/XXXX-XX.");
            return false;
        }
        return true;
    }
}