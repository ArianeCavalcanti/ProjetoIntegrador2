package View.imagens.telas;

import Classes.Usuario;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.table.DefaultTableModel;

public class CadastroUsuarios extends javax.swing.JFrame {

    private final String[] tableColumns = {"Id Usuário", "Login", "Senha", "Tipo"};
    DefaultTableModel tableModel = new DefaultTableModel(tableColumns, 0);
    private final ArrayList<Usuario> UsuarioList = new ArrayList<>();

    public CadastroUsuarios() {
        initComponents();
        geraAcessbilidade();

        atualizarTabela();
    }

    public final void geraAcessbilidade() {
        jButtonSalvar.setMnemonic(KeyEvent.VK_S);
        jButtonLimpar.setMnemonic(KeyEvent.VK_L);
        jButtonPesquisar.setMnemonic(KeyEvent.VK_P);
        jButtonExcluir.setMnemonic(KeyEvent.VK_E);
        jButtonVoltar.setMnemonic(KeyEvent.VK_V);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextLogin = new javax.swing.JTextField();
        jTextSenha = new javax.swing.JTextField();
        jTextTipoUsuario = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableUsuario = new javax.swing.JTable();
        jButtonSalvar = new javax.swing.JButton();
        jButtonLimpar = new javax.swing.JButton();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonExcluir = new javax.swing.JButton();
        jButtonVoltar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cadastro de Usuários", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18), new java.awt.Color(51, 102, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados Usuários", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 0, 14), new java.awt.Color(255, 51, 51))); // NOI18N

        jLabel9.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel9.setText("Login");

        jLabel11.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel11.setText("Senha:");

        jLabel13.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel13.setText("Tipo Usuário:");

        jTextLogin.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jTextSenha.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextSenhaActionPerformed(evt);
            }
        });

        jTextTipoUsuario.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                    .addComponent(jTextSenha))
                .addGap(44, 44, 44)
                .addComponent(jLabel13)
                .addGap(27, 27, 27)
                .addComponent(jTextTipoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jTextTipoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 850, 160));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTableUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID Usuários", "Login", "Senha", "Tipo de Usuário"
            }
        ));
        jScrollPane2.setViewportView(jTableUsuario);

        jTabbedPane1.addTab("Usuários", jScrollPane2);

        jScrollPane1.setViewportView(jTabbedPane1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, 1070, 460));

        jButtonSalvar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonSalvar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonSalvar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 240, 140, 30));

        jButtonLimpar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonLimpar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonLimpar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonLimpar.setText("Limpar");
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonLimpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 240, 140, 30));

        jButtonPesquisar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonPesquisar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonPesquisar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonPesquisar, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 240, 150, 30));

        jButtonExcluir.setBackground(new java.awt.Color(226, 218, 218));
        jButtonExcluir.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonExcluir.setForeground(new java.awt.Color(41, 83, 241));
        jButtonExcluir.setText("Excluir");
        jButtonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonExcluir, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 240, 160, 30));

        jButtonVoltar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonVoltar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonVoltar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonVoltar.setText("Voltar");
        jButtonVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVoltarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 240, 140, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/imagens/telas/fundo de tela.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 29, 1110, 740));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextSenhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextSenhaActionPerformed

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed

       // Exibe uma caixa de diálogo para o usuário digitar o login do usuário
    String filtroUsuario = JOptionPane.showInputDialog(null, "Digite o login do usuário que deseja pesquisar:");

    if (filtroUsuario != null && !filtroUsuario.trim().isEmpty()) {
        try {
            // Conexão com o banco de dados
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/distribuidora_de_agua", "root", "T#7aB3$0m2@i");

            // Preparar a consulta SQL para buscar usuários pelo login
            String sql = "SELECT u.idusuario, u.login, u.senha, u.tipo "
                    + "FROM usuario u "
                    + "WHERE u.login LIKE ?";

            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, "%" + filtroUsuario.trim() + "%");  // Usar LIKE para busca parcial

            ResultSet rs = ps.executeQuery();

            // Obter o modelo da tabela para preencher os dados
            DefaultTableModel model = (DefaultTableModel) jTableUsuario.getModel();
            model.setRowCount(0);  // Limpa a tabela antes de adicionar os novos dados

            if (!rs.next()) {  // Verifica se o ResultSet está vazio
                JOptionPane.showMessageDialog(null, "Nenhum usuário encontrado para o login informado!");
            } else {
                // Se houver resultados, adicionar ao modelo da tabela
                do {
                    Object[] rowData = new Object[model.getColumnCount()];  // Ajustar o número de colunas de acordo com o modelo da tabela
                    rowData[0] = rs.getInt("idusuario");   // ID Usuário
                    rowData[1] = rs.getString("login");    // Login
                    rowData[2] = rs.getString("senha");    // Senha
                    rowData[3] = rs.getString("tipo");     // Tipo (ex: administrador, usuário comum)

                    // Adicionar a linha ao modelo da tabela
                    model.addRow(rowData);
                } while (rs.next());
            }

            // Fechar a consulta e a conexão
            ps.close();
            conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao buscar usuários: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, insira o login de um usuário para filtrar.");
    }
    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonLimparActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed

        if (!emptyFields()) {
            Usuario usuario = getUsuario();
            if (usuario != null) {
                inserirUsuario(usuario);
                salvarRegistrosEmArquivo("registros.csv");
            }

            // Limpar os campos após a inserção
            jTextLogin.setText("");
            jTextSenha.setText("");
            jTextTipoUsuario.setText("");

            jTextLogin.requestFocus();
        }
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirActionPerformed
        // Obter a linha selecionada na tabela
        int rowIndex = jTableUsuario.getSelectedRow();

        // Verificar se há uma linha selecionada
        if (rowIndex >= 0) {
            // Confirmar a exclusão
            String[] options = {"Sim", "Não"};
            int deletar = JOptionPane.showOptionDialog(
                    rootPane,
                    "Tem certeza que deseja excluir o Registro?",
                    "Exclusão Registro de Usuário",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            // Se o usuário confirmar a exclusão
            if (deletar == 0) {
                // Obter o ID do usuário da tabela
                String idString = jTableUsuario.getValueAt(rowIndex, 0).toString();
                int usuarioId = Integer.parseInt(idString);

                String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
                String user = "root";
                String password = "T#7aB3$0m2@i";

                try ( Connection connection = DriverManager.getConnection(url, user, password)) {
                    // Excluir o usuário da tabela Usuario
                    String sqlUsuario = "DELETE FROM Usuario WHERE idusuario = ?";
                    try ( PreparedStatement statementUsuario = connection.prepareStatement(sqlUsuario)) {
                        statementUsuario.setInt(1, usuarioId);
                        int affectedRows = statementUsuario.executeUpdate();

                        if (affectedRows > 0) {
                            JOptionPane.showMessageDialog(rootPane, "Usuário excluído com sucesso.");

                            // Atualizar a tabela para refletir a exclusão
                            atualizarTabela();
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Erro ao excluir usuário.");
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, "Erro ao excluir usuário: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Selecione um usuário para excluir.");
        }

    }//GEN-LAST:event_jButtonExcluirActionPerformed

    private void jButtonVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVoltarActionPerformed
        Login login = new Login();
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CadastroUsuarios().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JButton jButtonVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableUsuario;
    private javax.swing.JTextField jTextLogin;
    private javax.swing.JTextField jTextSenha;
    private javax.swing.JTextField jTextTipoUsuario;
    // End of variables declaration//GEN-END:variables

    private boolean emptyFields() {
        boolean empty = true;
        if (jTextLogin.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Login não pode ser vazio.");
        } else if (jTextSenha.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Senha não pode ser vazio.");
        } else if (jTextTipoUsuario.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Tipo de Usuário não pode ser vazio.");
        } else {
            empty = false;
        }
        return empty;
    }

    private Usuario getUsuario() {
        if (!emptyFields()) {
            String login = jTextLogin.getText();
            String senha = jTextSenha.getText();
            String tipo = jTextTipoUsuario.getText();

            // O ID será atribuído após a inserção no banco de dados
            Usuario usuario = new Usuario(0, login, senha, tipo);

            JOptionPane.showMessageDialog(null, """
                                Os seguintes dados foram cadastrados com sucesso:
                                Login: """ + login + "\n"
                    + "Tipo de usuário: " + tipo);

            return usuario;
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, preencha todos os campos corretamente.");
        }
        return null;
    }

// Métodos para verificar se o usuário é gerente ou administrador
    public boolean isGerente() {
        String tipo = jTextTipoUsuario.getText();
        return "gerente".equalsIgnoreCase(tipo);
    }

    public boolean isAdministrador() {
        String tipo = jTextTipoUsuario.getText();
        return "administrador".equalsIgnoreCase(tipo);
    }

    private void inserirUsuario(Usuario usuario) {
        if (usuario != null) {
            String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
            String user = "root";
            String password = "T#7aB3$0m2@i";

            String insertSql = "INSERT INTO usuario (login, senha, tipo) VALUES (?, ?, ?)";

            try ( Connection conn = DriverManager.getConnection(url, user, password);  PreparedStatement ps = conn.prepareStatement(insertSql)) {

                // Configura os parâmetros da instrução SQL
                ps.setString(1, usuario.getLogin());
                ps.setString(2, usuario.getSenha());
                ps.setString(3, usuario.getTipo());

                // Executa a inserção no banco de dados
                int rowsAffected = ps.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Usuário salvo com sucesso.");
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Erro ao salvar usuário: " + e.getMessage());
            }

            atualizarTabela();
        }
    }

    private void atualizarTabela() {
        String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
        String user = "root";
        String password = "T#7aB3$0m2@i";

        String sql = "SELECT idusuario, login, senha, tipo FROM usuario";

        try ( Connection conn = DriverManager.getConnection(url, user, password);  PreparedStatement ps = conn.prepareStatement(sql);  ResultSet rs = ps.executeQuery()) {

            DefaultTableModel tableModel = new DefaultTableModel(new String[]{"ID Usuário", "Login", "Senha", "Tipo"}, 0);

            // Itera sobre os resultados da consulta e adiciona à tabela
            while (rs.next()) {
                int idUsuario = rs.getInt("idusuario");
                String login = rs.getString("login");
                String senha = rs.getString("senha");
                String tipo = rs.getString("tipo");

                String[] rowData = {String.valueOf(idUsuario), login, senha, tipo};
                tableModel.addRow(rowData);
            }

            jTableUsuario.setModel(tableModel);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar tabela: " + e.getMessage());
        }
    }

    private void salvarRegistrosEmArquivo(String nomeArquivo) {
        try ( BufferedWriter writer = new BufferedWriter(new FileWriter(nomeArquivo))) {
            writer.write("Login, Senha, Tipo");
            writer.newLine();
            for (Usuario usuario : UsuarioList) {
                writer.write(usuario.getLogin() + "," + usuario.getSenha() + "," + usuario.getTipo());
                writer.newLine();
            }
            JOptionPane.showMessageDialog(null, "Registros salvos com sucesso em " + nomeArquivo);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar registros em arquivo: " + e.getMessage());
        }
    }
}
