package View.imagens.telas;

import Classes.Venda;

import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;

public class CadastroVenda extends javax.swing.JFrame {

    private final String[] tableColumns = {"ID Venda", "Data da Venda", "Status", "Id do Cliente", "Id do Funcionário", "Tipo Pagamento", "Número do Cartão", "Número das Parcelas, Valor Total"};
    DefaultTableModel tableModel = new DefaultTableModel(tableColumns, 0);
    private final ArrayList<Venda> listaVendas = new ArrayList<>();

    public CadastroVenda() {

        initComponents();
        geraAcessbilidade();

        setTitle("Cadastro de Vendas");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        jTable1.setModel(tableModel);
        loadData();
        // Preenche a data e hora atual no campo
        preencherDataHoraAtual();
        // Preenche o ID da Venda com o próximo ID gerado
        int proximoIdVenda = gerarProximoIdVenda();
        if (proximoIdVenda != -1) {
            jTextIdVenda.setText(String.valueOf(proximoIdVenda));
        }

    }

    private void geraAcessbilidade() {

        // Definindo atalhos para botões
        jButtonRegistrar.setMnemonic(KeyEvent.VK_R);
        jButtonLimpar.setMnemonic(KeyEvent.VK_L);
        jButtonVoltar.setMnemonic(KeyEvent.VK_V);

        // Adicionando tooltips com informações dos atalhos
        jButtonRegistrar.setToolTipText("Salvar (Alt+S)");
        jButtonLimpar.setToolTipText("Limpar (Alt+L)");
        jButtonVoltar.setToolTipText("Sair (Alt+V)");

        // Adicionando tooltips aos campos de texto
        jTextIdVenda.setToolTipText("Insira o ID da Venda");
        jTextDataVenda.setToolTipText("Insira a Data da Venda");
        jTextStatus.setToolTipText("Insira o Status ");
        jTextIdCliente.setToolTipText("Insira o Id do Cliente ");
        jTextIdFuncionario.setToolTipText("Insira o Id do Funcionário");
        jComboBoxTipoPagamento.setToolTipText("Insira o tipo de pagamento");
        jTextNumeroCartao.setToolTipText("Insira o número do cartão(XXXX XXXX XXXX XXXX)");
        jTextNumeroParcelas.setToolTipText("Insira o número de parcelas");

        // Definindo a ordem de foco
        jTextIdVenda.setNextFocusableComponent(jTextDataVenda);
        jTextDataVenda.setNextFocusableComponent(jTextStatus);
        jTextStatus.setNextFocusableComponent(jTextIdCliente);
        jTextIdCliente.setNextFocusableComponent(jTextIdFuncionario);
        jTextIdFuncionario.setNextFocusableComponent(jComboBoxTipoPagamento);
        jComboBoxTipoPagamento.setNextFocusableComponent(jTextNumeroCartao);
        jTextNumeroCartao.setNextFocusableComponent(jTextNumeroParcelas);
        jTextNumeroParcelas.setNextFocusableComponent(jTextValorTotal);
        (jTextValorTotal).setNextFocusableComponent(jButtonRegistrar);
        jButtonRegistrar.setNextFocusableComponent(jButtonLimpar);
        jButtonLimpar.setNextFocusableComponent(jButtonVoltar);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabelDadosVenda = new javax.swing.JLabel();
        jLabelIdFuncionario = new javax.swing.JLabel();
        jLabelIdCliente = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jLabelNumeroCartao = new javax.swing.JLabel();
        jLabelTipoPagamento = new javax.swing.JLabel();
        jLabelDataVenda = new javax.swing.JLabel();
        jLabelValorTotal = new javax.swing.JLabel();
        jLabelIdVenda = new javax.swing.JLabel();
        jLabel1DadosPagamento = new javax.swing.JLabel();
        jLabel1NumeroParcelas = new javax.swing.JLabel();
        jTextDataVenda = new javax.swing.JTextField();
        jTextIdCliente = new javax.swing.JTextField();
        jTextNumeroParcelas = new javax.swing.JTextField();
        jTextStatus = new javax.swing.JTextField();
        jTextValorTotal = new javax.swing.JTextField();
        jTextIdFuncionario = new javax.swing.JTextField();
        jTextIdVenda = new javax.swing.JTextField();
        jComboBoxTipoPagamento = new javax.swing.JComboBox<>();
        jTextNumeroCartao = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonRegistrar = new javax.swing.JButton();
        jButtonLimpar = new javax.swing.JButton();
        jButtonVoltar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cadastro de Vendas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18), new java.awt.Color(51, 102, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Registrar Vendas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 0, 14), new java.awt.Color(255, 51, 51))); // NOI18N

        jLabelDadosVenda.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jLabelDadosVenda.setForeground(new java.awt.Color(255, 0, 102));
        jLabelDadosVenda.setText("Dados da Venda");

        jLabelIdFuncionario.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabelIdFuncionario.setText("ID Funcionário:");

        jLabelIdCliente.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabelIdCliente.setText("ID Cliente:");

        jLabelStatus.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabelStatus.setText("Status:");

        jLabelNumeroCartao.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabelNumeroCartao.setText("Número do Cartão:");

        jLabelTipoPagamento.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabelTipoPagamento.setText("Tipo de Pagamento:");

        jLabelDataVenda.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabelDataVenda.setText("Data da Venda:");

        jLabelValorTotal.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jLabelValorTotal.setForeground(new java.awt.Color(51, 51, 255));
        jLabelValorTotal.setText("Valor Total:");

        jLabelIdVenda.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabelIdVenda.setText("ID Venda:");

        jLabel1DadosPagamento.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jLabel1DadosPagamento.setForeground(new java.awt.Color(255, 0, 102));
        jLabel1DadosPagamento.setText("Dados de Pagamento:");

        jLabel1NumeroParcelas.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel1NumeroParcelas.setText("Número de Parcelas:");

        jTextDataVenda.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextDataVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextDataVendaActionPerformed(evt);
            }
        });

        jTextIdCliente.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextIdCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextIdClienteActionPerformed(evt);
            }
        });

        jTextNumeroParcelas.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jTextStatus.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextStatusActionPerformed(evt);
            }
        });

        jTextValorTotal.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jTextIdFuncionario.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextIdFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextIdFuncionarioActionPerformed(evt);
            }
        });

        jTextIdVenda.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jComboBoxTipoPagamento.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBoxTipoPagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione o Pagamento", "Cartão de Crédito", "Cartão de Débito", "Dinheiro", "Pix" }));
        jComboBoxTipoPagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTipoPagamentoActionPerformed(evt);
            }
        });

        jTextNumeroCartao.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1DadosPagamento)
                                .addGap(937, 937, 937))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addGap(161, 161, 161)
                                        .addComponent(jLabelDadosVenda))
                                    .addComponent(jLabelNumeroCartao, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(24, 24, 24))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabelStatus)
                                        .addGap(76, 76, 76)
                                        .addComponent(jTextStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelDataVenda)
                                            .addComponent(jLabelIdVenda))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextIdVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(78, 78, 78)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelIdFuncionario)
                                    .addComponent(jLabelIdCliente))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextIdFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelTipoPagamento)
                                    .addComponent(jLabel1NumeroParcelas))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextNumeroParcelas, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxTipoPagamento, 0, 192, Short.MAX_VALUE)
                                    .addComponent(jTextNumeroCartao))
                                .addGap(73, 73, 73)
                                .addComponent(jLabelValorTotal)
                                .addGap(33, 33, 33)
                                .addComponent(jTextValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabelDadosVenda)
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelIdVenda)
                    .addComponent(jTextIdVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDataVenda)
                            .addComponent(jTextDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelIdCliente, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextIdCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStatus)
                    .addComponent(jTextStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelIdFuncionario)
                    .addComponent(jTextIdFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1DadosPagamento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTipoPagamento)
                    .addComponent(jComboBoxTipoPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNumeroCartao)
                    .addComponent(jTextNumeroCartao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextNumeroParcelas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1NumeroParcelas)
                    .addComponent(jLabelValorTotal)
                    .addComponent(jTextValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(80, 80, 80))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, 790, 400));

        jTable1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Venda", "Data da Venda", "Status", "ID Cliente", "ID Funcionário", "Tipo Pagamento", "Número do Cartão", "Número de Parcelas", "Valor Total"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        jTabbedPane1.addTab("Vendas", jScrollPane3);

        jScrollPane1.setViewportView(jTabbedPane1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, 1070, 280));

        jButtonRegistrar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonRegistrar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonRegistrar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonRegistrar.setText("Registar");
        jButtonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegistrarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 450, 140, 30));

        jButtonLimpar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonLimpar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonLimpar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonLimpar.setText("Limpar");
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonLimpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 450, 140, 30));

        jButtonVoltar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonVoltar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonVoltar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonVoltar.setText("Voltar");
        jButtonVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVoltarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 450, 140, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/imagens/telas/fundo de tela.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 29, 1090, 760));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1124, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 802, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextIdClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextIdClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextIdClienteActionPerformed

    private void jTextIdFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextIdFuncionarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextIdFuncionarioActionPerformed

    private void jButtonVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVoltarActionPerformed
        MenuPrincipal menuPrincipal = new MenuPrincipal();
        menuPrincipal.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonVoltarActionPerformed

    private void jTextStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextStatusActionPerformed

    private void jButtonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistrarActionPerformed

        if (!emptyFields()) {
            Venda venda = getVenda();
            if (venda != null) {
                inserirVenda(venda);
                try {
                    salvarRegistrosEmArquivo("registros.csv");
                } catch (IOException ex) {
                    Logger.getLogger(CadastroVenda.class.getName()).log(Level.SEVERE, null, ex);
                }

                // Recarregar os dados na tabela
                loadData();

                // Limpar os campos de texto e definir o foco no campo jTextIdVenda
                jTextIdVenda.setText("");
                jTextDataVenda.setText("");
                jTextStatus.setText("");
                jTextIdCliente.setText("");
                jTextIdFuncionario.setText("");
                jComboBoxTipoPagamento.setSelectedIndex(0);
                jTextNumeroCartao.setText("");
                jTextNumeroParcelas.setText("");
                jTextValorTotal.setText("");

                jTextIdVenda.requestFocus();

                // Atualizar a tabela com os novos dados
                atualizarTabela();
            }
        }
    }//GEN-LAST:event_jButtonRegistrarActionPerformed

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed

        jTextIdVenda.setText("");
        jTextDataVenda.setText("");
        jTextStatus.setText("");
        jTextIdCliente.setText("");
        jTextIdFuncionario.setText("");
        jComboBoxTipoPagamento.setSelectedIndex(0);
        jTextNumeroCartao.setText("");
        jTextNumeroParcelas.setText("");
        jTextValorTotal.setText("");

        jTextIdVenda.requestFocus();


    }//GEN-LAST:event_jButtonLimparActionPerformed

    private void jComboBoxTipoPagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTipoPagamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxTipoPagamentoActionPerformed

    private void jTextDataVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextDataVendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextDataVendaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CadastroVenda().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonRegistrar;
    private javax.swing.JButton jButtonVoltar;
    private javax.swing.JComboBox<String> jComboBoxTipoPagamento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel1DadosPagamento;
    private javax.swing.JLabel jLabel1NumeroParcelas;
    private javax.swing.JLabel jLabelDadosVenda;
    private javax.swing.JLabel jLabelDataVenda;
    private javax.swing.JLabel jLabelIdCliente;
    private javax.swing.JLabel jLabelIdFuncionario;
    private javax.swing.JLabel jLabelIdVenda;
    private javax.swing.JLabel jLabelNumeroCartao;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelTipoPagamento;
    private javax.swing.JLabel jLabelValorTotal;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextDataVenda;
    private javax.swing.JTextField jTextIdCliente;
    private javax.swing.JTextField jTextIdFuncionario;
    private javax.swing.JTextField jTextIdVenda;
    private javax.swing.JTextField jTextNumeroCartao;
    private javax.swing.JTextField jTextNumeroParcelas;
    private javax.swing.JTextField jTextStatus;
    private javax.swing.JTextField jTextValorTotal;
    // End of variables declaration//GEN-END:variables

    private boolean emptyFields() {
        boolean empty = false;

        // Verifica se o campo "ID da Venda" está vazio
        if (jTextIdVenda.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! ID da Venda não pode ser vazio.");
            empty = true;
        }

        // Verifica se o campo "ID Cliente" está vazio
        if (jTextIdCliente.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! ID Cliente não pode ser vazio.");
            empty = true;
        }

        // Verifica se o campo "Status" está vazio
        if (jTextStatus.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Status não pode ser vazio.");
            empty = true;
        }

        // Verifica se o campo "ID Funcionário" está vazio
        if (jTextIdFuncionario.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! ID Funcionário não pode ser vazio.");
            empty = true;
        }

        // Verifica se o campo "Tipo de Pagamento" está selecionado
        if (jComboBoxTipoPagamento.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Tipo Pagamento não pode ser vazio.");
            empty = true;
        } else {
            // Verifica o tipo de pagamento selecionado
            String tipoPagamento = jComboBoxTipoPagamento.getSelectedItem().toString();
            if (tipoPagamento.equals("Cartão de Crédito") || tipoPagamento.equals("Cartão de Débito")) {
                // Verifica se os campos do cartão estão vazios
                if (jTextNumeroCartao.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Número do Cartão não pode ser vazio.");
                    empty = true;
                }
                if (jTextNumeroParcelas.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Número de Parcelas não pode ser vazio.");
                    empty = true;
                }
            }
        }

        // Verifica se o campo "Valor Total" está vazio
        if (jTextValorTotal.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Valor Total não pode ser vazio.");
            empty = true;
        }

        return empty;
    }

    private void loadData() {
        String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
        String user = "root";
        String password = "T#7aB3$0m2@i";

        String sql = "SELECT v.idvenda, v.data_venda, v.status, v.tipo_pagamento, "
                + "v.numero_cartao, v.numero_parcelas, v.valor_total, "
                + "v.cliente_idcliente, v.funcionario_idfuncionario "
                + "FROM venda v";

        try ( Connection conn = DriverManager.getConnection(url, user, password);  PreparedStatement ps = conn.prepareStatement(sql);  ResultSet rs = ps.executeQuery()) {

            tableModel.setRowCount(0); // Limpa qualquer dado existente na tabela

            int rowCount = 0; // Contador de linhas adicionadas
            while (rs.next()) {
                Object[] rowData = new Object[9];
                rowData[0] = rs.getInt("idvenda");
                rowData[1] = rs.getTimestamp("data_venda").toLocalDateTime().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
                rowData[2] = rs.getString("status");
                rowData[3] = rs.getInt("cliente_idcliente");
                rowData[4] = rs.getInt("funcionario_idfuncionario");
                rowData[5] = rs.getString("tipo_pagamento");
                rowData[6] = rs.getString("numero_cartao");
                rowData[7] = rs.getInt("numero_parcelas");
                rowData[8] = String.format("%.2f", rs.getDouble("valor_total")); // Formata o valor total

                tableModel.addRow(rowData);
                rowCount++;
            }

            System.out.println("Dados carregados com sucesso. Total de registros: " + rowCount);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar os dados: " + e.getMessage());
        }
    }

    private boolean validarCartao(String numeroCartao) {

        String regex = "^(?:\\d{4} \\d{4} \\d{4} \\d{4})$";  // Formato com espaços entre grupos de quatro dígitos

        if (!numeroCartao.matches(regex)) {
            JOptionPane.showMessageDialog(null, "Formato de número do cartão inválido.");
            return false;
        }
        return true;
    }

    private boolean validarValorTotal(String valorTotal) {
        // Validação para diferentes formatos de valores
        if (!valorTotal.matches("\\d{1,3}(\\.\\d{3})*(,\\d{2})?")) {
            JOptionPane.showMessageDialog(null, "Formato do valor inválido. Use o formato 00.000,00.");
            return false;
        }
        return true;
    }

    private Venda getVenda() {
        // Gerar o próximo ID de venda automaticamente
        int proximoIdVenda = gerarProximoIdVenda(); // Chama o método que gera o próximo ID
        jTextIdVenda.setText(String.valueOf(proximoIdVenda)); // Atualiza o campo de ID com o próximo valor

        // Pega a data e hora atuais para a venda
        LocalDateTime dataVenda = LocalDateTime.now();

        // Captura o tipo de pagamento selecionado no JComboBox
        String tipoPagamento = jComboBoxTipoPagamento.getSelectedItem().toString();

        // Se o tipo de pagamento for Cartão de Crédito ou Débito, valida o número do cartão
        if (tipoPagamento.equals("Cartão de Crédito") || tipoPagamento.equals("Cartão de Débito")) {
            if (!validarCartao(jTextNumeroCartao.getText().trim())) {
                return null; // Retorna null se o cartão for inválido
            }
        }

        // Valida o valor total inserido
        if (!validarValorTotal(jTextValorTotal.getText().trim())) {
            return null; // Retorna null se o valor total for inválido
        }

        // Pega o número do cartão (se aplicável) ou define como vazio
        String numeroCartao = (tipoPagamento.equals("Cartão de Crédito") || tipoPagamento.equals("Cartão de Débito"))
                ? jTextNumeroCartao.getText().trim()
                : ""; // Define como vazio se o pagamento não for com cartão

        // Pega o número de parcelas (se aplicável) ou define como 0
        int numeroParcelasInt = (tipoPagamento.equals("Cartão de Crédito") || tipoPagamento.equals("Cartão de Débito"))
                ? Integer.parseInt(jTextNumeroParcelas.getText().trim())
                : 0;

        // Converte o número de parcelas para String
        String numeroParcelas = String.valueOf(numeroParcelasInt);

        // Cria e retorna uma nova instância da classe Venda com os dados coletados
        return new Venda(
                proximoIdVenda, // ID da venda gerado automaticamente
                dataVenda, // Data e hora da venda
                jTextStatus.getText().trim(), // Status da venda
                tipoPagamento, // Tipo de pagamento
                numeroCartao, // Número do cartão (se aplicável)
                numeroParcelas, // Número de parcelas (se aplicável)
                Integer.parseInt(jTextIdCliente.getText().trim()), // ID do cliente
                Integer.parseInt(jTextIdFuncionario.getText().trim()), // ID do funcionário
                Double.parseDouble(jTextValorTotal.getText().trim().replace(".", "").replace(",", ".")) // Valor total da venda formatado corretamente
        );
    }

    private void atualizarTabela() {
        tableModel = new DefaultTableModel(new String[]{
            "ID Venda", "Data da Venda", "Status", "ID do Cliente", "ID do Funcionário", "Tipo de Pagamento",
            "Número do Cartão", "Número de Parcelas", "Valor Total"
        }, 0);

        if (!listaVendas.isEmpty()) {
            for (Venda venda : listaVendas) {
                String dataFormatada = venda.getDataVenda().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
                String numeroParcelas = String.valueOf(venda.getNumeroParcelas());
                String valorTotal = String.format("%.2f", venda.getValorTotal()); // Formatação correta

                String[] rowData = {
                    String.valueOf(venda.getIdVenda()),
                    dataFormatada,
                    venda.getStatus(),
                    String.valueOf(venda.getIdCliente()),
                    String.valueOf(venda.getIdFuncionario()),
                    venda.getTipoPagamento(),
                    venda.getNumeroCartao(),
                    numeroParcelas,
                    valorTotal
                };

                tableModel.addRow(rowData);
            }
        }

        jTable1.setModel(tableModel);
    }

    public Venda criarVenda(int idVenda, String dataHoraFormatada, String status, String tipoPagamento, String numeroCartao, String numeroParcelas, int idCliente, int idFuncionario, double valorTotal) {
        LocalDateTime dataVenda = LocalDateTime.parse(dataHoraFormatada, DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"));
        return new Venda(idVenda, dataVenda, status, tipoPagamento, numeroCartao, numeroParcelas, idCliente, idFuncionario, valorTotal);
    }

    private void inserirVenda(Venda venda) {
        String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
        String user = "root";
        String password = "T#7aB3$0m2@i";

        String sql = "INSERT INTO venda (data_venda, status, tipo_pagamento, numero_cartao, numero_parcelas, valor_total, cliente_idcliente, funcionario_idfuncionario) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        try ( Connection conn = DriverManager.getConnection(url, user, password);  PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            // Preenche os valores no PreparedStatement
            ps.setTimestamp(1, Timestamp.valueOf(venda.getDataVenda()));
            ps.setString(2, venda.getStatus());
            ps.setString(3, venda.getTipoPagamento()); // Corrigido para String
            ps.setString(4, venda.getNumeroCartao());
            ps.setString(5, venda.getNumeroParcelas()); // Corrigido para String
            ps.setDouble(6, venda.getValorTotal());
            ps.setInt(7, venda.getIdCliente());
            ps.setInt(8, venda.getIdFuncionario());

            // Executa a inserção e captura o número de linhas afetadas
            int affectedRows = ps.executeUpdate();

            if (affectedRows > 0) {
                try ( ResultSet generatedKeys = ps.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        venda.setIdVenda(generatedKeys.getInt(1)); // Obtém o ID gerado
                        listaVendas.add(venda); // Adiciona a venda à lista
                        atualizarTabela(); // Atualiza a tabela de vendas
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao inserir a venda no banco de dados: " + e.getMessage());
        }
    }

    private void preencherDataHoraAtual() {
        LocalDateTime agora = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        jTextDataVenda.setText(agora.format(formatter));
    }

    private void salvarRegistrosEmArquivo(String nomeArquivo) throws IOException {
        try ( BufferedWriter writer = new BufferedWriter(new FileWriter(nomeArquivo))) {
            writer.write("ID da Venda,Data da Venda,Status,ID Cliente,ID Funcionário,Tipo Pagamento,Número do Cartão,Número de Parcelas,Valor Total");
            writer.newLine();
            for (Venda venda : listaVendas) {
                writer.write(venda.getIdVenda() + ","
                        + venda.getDataVenda().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")) + ","
                        + venda.getStatus() + ","
                        + venda.getIdCliente() + ","
                        + venda.getIdFuncionario() + ","
                        + venda.getTipoPagamento() + ","
                        + venda.getNumeroCartao() + ","
                        + venda.getNumeroParcelas() + ","
                        + String.format("%.2f", venda.getValorTotal()));
                writer.newLine();
            }
            JOptionPane.showMessageDialog(null, "Registros salvos com sucesso em " + nomeArquivo);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar registros em arquivo: " + e.getMessage());
        }
    }

    private int gerarProximoIdVenda() {
        String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
        String user = "root";
        String password = "T#7aB3$0m2@i";

        String sql = "SELECT MAX(idvenda) FROM venda"; // Consulta o maior ID já registrado

        try ( Connection conn = DriverManager.getConnection(url, user, password);  Statement stmt = conn.createStatement();  ResultSet rs = stmt.executeQuery(sql)) {

            if (rs.next()) {
                int maxId = rs.getInt(1);
                return maxId + 1; // Retorna o próximo ID como o maior ID + 1
            } else {
                return 101; // Se não houver registros, começa a partir de 101
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao gerar próximo ID de venda: " + e.getMessage());
            return -1; // Retorna um valor inválido em caso de erro
        }
    }

}
