package View.imagens.telas;

import Classes.Cliente;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;

public class CadastroClientes extends javax.swing.JFrame {

    private final String[] tableColumns = {"Id cliente", "Nome", "CPF", "RG", "Telefone Fixo", "Celular", "Email", "Endereço", "Bairro", "CEP", "Cidade"};
    DefaultTableModel tableModel = new DefaultTableModel(tableColumns, 0);
    private final ArrayList<Cliente> listaClientes = new ArrayList<>();

    public CadastroClientes() {
        initComponents();
        geraAcessbilidade();
        loadData();
        setTitle("Cadastro de Clientes");
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        jTableClientes.setModel(tableModel);

    }

    private void geraAcessbilidade() {

        // Definindo atalhos para botões
        jButtonSalvar.setMnemonic(KeyEvent.VK_S);
        jButtonLimpar.setMnemonic(KeyEvent.VK_L);
        jButtonPesquisar.setMnemonic(KeyEvent.VK_P);
        jButtonExcluir.setMnemonic(KeyEvent.VK_E);
        jButtonVoltar.setMnemonic(KeyEvent.VK_V);

        // Adicionando tooltips com informações dos atalhos
        jButtonSalvar.setToolTipText("Salvar (Alt+S)");
        jButtonLimpar.setToolTipText("Limpar (Alt+L)");
        jButtonPesquisar.setToolTipText("Limpar (Alt+L)");
        jButtonExcluir.setToolTipText("Excluir (Alt+E)");
        jButtonVoltar.setToolTipText("Sair (Alt+V)");

        // Adicionando tooltips aos campos de texto
        jTextNome.setToolTipText("Insira o nome do cliente");
        jTextCpf.setToolTipText("Insira o CPF(XXX.XXX.XXX-XX) do cliente ");
        jTextRg.setToolTipText("Insira o Rg (XX.XXX.XXX-X) do Cliente");
        jTextTelefoneFixo.setToolTipText("Insira o telefone((XX)XXXXX-XXXX) fixo do cliente");
        jTextCelular.setToolTipText("Insira o celular do cliente");
        jTextEmail.setToolTipText("Insira o email do cliente");
        jTextEndereco.setToolTipText("Insira o endereço do cliente");
        jTextBairro.setToolTipText("Insira o bairro do cliente");
        jTextCep.setToolTipText("Insira o CEP do cliente");
        jTextCidade.setToolTipText("Insira a Cidade do cliente");

        // Definindo a ordem de foco
        jTextNome.setNextFocusableComponent(jTextCpf);
        jTextCpf.setNextFocusableComponent(jTextRg);
        jTextRg.setNextFocusableComponent(jTextTelefoneFixo);
        jTextTelefoneFixo.setNextFocusableComponent(jTextCelular);
        jTextCelular.setNextFocusableComponent(jTextEmail);
        jTextEmail.setNextFocusableComponent(jTextEndereco);
        jTextEndereco.setNextFocusableComponent(jTextBairro);
        jTextBairro.setNextFocusableComponent(jTextCep);
        jTextCep.setNextFocusableComponent(jTextCidade);
        jTextCidade.setNextFocusableComponent(jButtonSalvar);
        jButtonSalvar.setNextFocusableComponent(jButtonLimpar);
        jButtonLimpar.setNextFocusableComponent(jButtonPesquisar);
        jButtonPesquisar.setNextFocusableComponent(jButtonExcluir);
        jButtonExcluir.setNextFocusableComponent(jButtonVoltar);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextNome = new javax.swing.JTextField();
        jTextEndereco = new javax.swing.JTextField();
        jTextBairro = new javax.swing.JTextField();
        jTextEmail = new javax.swing.JTextField();
        jTextCidade = new javax.swing.JTextField();
        jTextTelefoneFixo = new javax.swing.JFormattedTextField();
        jTextCelular = new javax.swing.JFormattedTextField();
        jTextCpf = new javax.swing.JFormattedTextField();
        jTextRg = new javax.swing.JFormattedTextField();
        jTextCep = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableClientes = new javax.swing.JTable();
        jButtonSalvar = new javax.swing.JButton();
        jButtonLimpar = new javax.swing.JButton();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonExcluir = new javax.swing.JButton();
        jButtonVoltar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cadastro de Clientes", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18), new java.awt.Color(51, 102, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados Pessoais", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 0, 14), new java.awt.Color(255, 51, 51))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel2.setText("Nome :");

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel3.setText("CPF:");

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel5.setText("Endereço:");

        jLabel6.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel6.setText("Bairro:");

        jLabel7.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel7.setText("RG:");

        jLabel8.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel8.setText("CEP:");

        jLabel9.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel9.setText("Telefone Fixo:");

        jLabel10.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel10.setText("Celular:");

        jLabel11.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel11.setText("Email:");

        jLabel12.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel12.setText("Cidade:");

        jTextNome.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNomeActionPerformed(evt);
            }
        });

        jTextEndereco.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jTextBairro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextBairro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextBairroActionPerformed(evt);
            }
        });

        jTextEmail.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jTextCidade.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCidadeActionPerformed(evt);
            }
        });

        try {
            jTextTelefoneFixo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTextCelular.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTextCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jTextCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCpfActionPerformed(evt);
            }
        });

        try {
            jTextRg.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###-#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTextCep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("######-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextNome, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextRg, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(jTextTelefoneFixo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84)
                                .addComponent(jLabel11))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextCep, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(58, 58, 58)
                                                .addComponent(jLabel12))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jTextCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextBairro, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                            .addComponent(jTextEmail))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel3)
                    .addComponent(jTextCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextRg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jTextEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextTelefoneFixo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel12)
                    .addComponent(jTextCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextCep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 930, 240));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Cliente", "Nome", "CPF", "RG", "Telefone Fixo", "Celular ", "Email", "Endereço", "Bairro", "CEP", "Cidade"
            }
        ));
        jScrollPane2.setViewportView(jTableClientes);

        jTabbedPane1.addTab("Clientes", jScrollPane2);

        jScrollPane1.setViewportView(jTabbedPane1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, 1040, 360));

        jButtonSalvar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonSalvar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonSalvar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 300, 150, 30));

        jButtonLimpar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonLimpar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonLimpar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonLimpar.setText("Limpar");
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonLimpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 300, 170, 30));

        jButtonPesquisar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonPesquisar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonPesquisar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonPesquisar, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 300, 170, 30));

        jButtonExcluir.setBackground(new java.awt.Color(226, 218, 218));
        jButtonExcluir.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonExcluir.setForeground(new java.awt.Color(41, 83, 241));
        jButtonExcluir.setText("Excluir");
        jButtonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonExcluir, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 300, 150, 30));

        jButtonVoltar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonVoltar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonVoltar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonVoltar.setText("Voltar");
        jButtonVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVoltarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 300, 140, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/imagens/telas/fundo de tela.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 29, 1070, 690));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1092, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextNomeActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed

        if (!emptyFields()) {
            Cliente cliente = getCliente();

            if (cliente != null) {
                inserirCliente(cliente);
                salvarRegistrosEmArquivo("registros.csv");
            }

            // Recarregar os dados na tabela
            loadData();

            // Limpar os campos após a inserção
            jTextNome.setText("");
            jTextCpf.setText("");
            jTextRg.setText("");
            jTextTelefoneFixo.setText("");
            jTextCelular.setText("");
            jTextEmail.setText("");
            jTextEndereco.setText("");
            jTextBairro.setText("");
            jTextCep.setText("");
            jTextCidade.setText("");

            jTextNome.requestFocus();
        }
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed

        jTextNome.setText("");
        jTextCpf.setText("");
        jTextRg.setText("");
        jTextTelefoneFixo.setText("");
        jTextCelular.setText("");
        jTextEmail.setText("");
        jTextEndereco.setText("");
        jTextBairro.setText("");
        jTextCep.setText("");
        jTextCidade.setText("");

        jTextNome.requestFocus();

    }//GEN-LAST:event_jButtonLimparActionPerformed

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed

     // Exibe uma caixa de diálogo para o usuário digitar o nome do cliente
    String filtroCliente = JOptionPane.showInputDialog(null, "Digite o nome do cliente que deseja pesquisar:");

    if (filtroCliente != null && !filtroCliente.trim().isEmpty()) {
        try {
            // Conexão com o banco de dados
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/distribuidora_de_agua", "root", "T#7aB3$0m2@i");

            // Preparar a consulta SQL para buscar clientes pelo nome
            String sql = "SELECT c.idcliente, c.nome, c.cpf, c.rg, c.telefone_fixo, c.celular, c.email, "
                    + "e.endereco, e.bairro, e.cep, e.cidade "
                    + "FROM cliente c "
                    + "JOIN endereco e ON c.endereco_idendereco = e.idendereco "
                    + "WHERE c.nome LIKE ?";

            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, "%" + filtroCliente.trim() + "%");  // Usar LIKE para buscar parcialmente

            ResultSet rs = ps.executeQuery();

            // Obter o modelo da tabela para preencher os dados
            DefaultTableModel model = (DefaultTableModel) jTableClientes.getModel();
            model.setRowCount(0);  // Limpa a tabela antes de adicionar os novos dados

            if (!rs.next()) {  // Verifica se o ResultSet está vazio
                JOptionPane.showMessageDialog(null, "Nenhum cliente encontrado para o nome informado!");
            } else {
                // Se houver resultados, adicionar ao modelo da tabela
                do {
                    Object[] rowData = new Object[11];  // Agora com 11 colunas
                    rowData[0] = rs.getInt("idcliente");          // ID Cliente
                    rowData[1] = rs.getString("nome");            // Nome Cliente
                    rowData[2] = rs.getString("cpf");             // CPF
                    rowData[3] = rs.getString("rg");              // RG
                    rowData[4] = rs.getString("telefone_fixo");   // Telefone Fixo
                    rowData[5] = rs.getString("celular");         // Celular
                    rowData[6] = rs.getString("email");           // Email
                    rowData[7] = rs.getString("endereco");        // Endereço
                    rowData[8] = rs.getString("bairro");          // Bairro
                    rowData[9] = rs.getString("cep");             // CEP
                    rowData[10] = rs.getString("cidade");         // Cidade

                    // Adicionar a linha ao modelo da tabela
                    model.addRow(rowData);
                } while (rs.next());
            }

            // Fechar a consulta e a conexão
            ps.close();
            conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao buscar clientes: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, insira o nome de um cliente para filtrar.");
    }

    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirActionPerformed
        // Obter a linha selecionada na tabela
        int rowIndex = jTableClientes.getSelectedRow();

        // Verificar se há uma linha selecionada
        if (rowIndex >= 0) {
            // Confirmar a exclusão
            String[] options = {"Sim", "Não"};
            int deletar = JOptionPane.showOptionDialog(
                    rootPane,
                    "Tem certeza que deseja excluir o registro?",
                    "Exclusão de Registro de Cliente",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            // Se o usuário confirmar a exclusão
            if (deletar == 0) {
                // Obter o ID do cliente da tabela
                String idString = jTableClientes.getValueAt(rowIndex, 0).toString();
                int clienteId = Integer.parseInt(idString);

                String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
                String user = "root";
                String password = "T#7aB3$0m2@i";

                try ( Connection connection = DriverManager.getConnection(url, user, password)) {
                    // Desativar o autocommit para gerenciar transações
                    connection.setAutoCommit(false);

                    // Excluir os itens de venda associados às vendas do cliente
                    String sqlItensVenda = "DELETE FROM produto_itens WHERE venda_idvenda IN (SELECT idvenda FROM Venda WHERE cliente_idcliente = ?)";
                    try ( PreparedStatement statementItensVenda = connection.prepareStatement(sqlItensVenda)) {
                        statementItensVenda.setInt(1, clienteId);
                        statementItensVenda.executeUpdate();
                    }

                    // Excluir as vendas associadas ao cliente
                    String sqlVenda = "DELETE FROM Venda WHERE cliente_idcliente = ?";
                    try ( PreparedStatement statementVenda = connection.prepareStatement(sqlVenda)) {
                        statementVenda.setInt(1, clienteId);
                        statementVenda.executeUpdate();
                    }

                    // Obter o ID do endereço associado ao cliente
                    String sqlObterEndereco = "SELECT endereco_idendereco FROM Cliente WHERE idcliente = ?";
                    int enderecoId = -1;
                    try ( PreparedStatement statementObterEndereco = connection.prepareStatement(sqlObterEndereco)) {
                        statementObterEndereco.setInt(1, clienteId);
                        try ( ResultSet rs = statementObterEndereco.executeQuery()) {
                            if (rs.next()) {
                                enderecoId = rs.getInt("endereco_idendereco");
                            }
                        }
                    }

                    // Excluir o cliente da tabela Cliente
                    String sqlCliente = "DELETE FROM Cliente WHERE idcliente = ?";
                    try ( PreparedStatement statementCliente = connection.prepareStatement(sqlCliente)) {
                        statementCliente.setInt(1, clienteId);
                        int affectedRows = statementCliente.executeUpdate();

                        if (affectedRows > 0 && enderecoId != -1) {
                            // Excluir o endereço associado ao cliente
                            String sqlEndereco = "DELETE FROM Endereco WHERE idendereco = ?";
                            try ( PreparedStatement statementEndereco = connection.prepareStatement(sqlEndereco)) {
                                statementEndereco.setInt(1, enderecoId);
                                statementEndereco.executeUpdate();
                            }

                            // Confirma a transação
                            connection.commit();

                            JOptionPane.showMessageDialog(rootPane, "Cliente excluído com sucesso.");

                            // Atualizar a tabela para refletir a exclusão
                            atualizarTabela();
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Erro ao excluir cliente.");
                            connection.rollback();  // Reverter se algo der errado
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, "Erro ao excluir cliente: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Selecione um cliente para excluir.");
        }
    }//GEN-LAST:event_jButtonExcluirActionPerformed

    private void jButtonVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVoltarActionPerformed

        MenuPrincipal menuPrincipal = new MenuPrincipal();
        menuPrincipal.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_jButtonVoltarActionPerformed

    private void jTextBairroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextBairroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextBairroActionPerformed

    private void jTextCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCidadeActionPerformed

    private void jTextCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCpfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCpfActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CadastroClientes().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JButton jButtonVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableClientes;
    private javax.swing.JTextField jTextBairro;
    private javax.swing.JFormattedTextField jTextCelular;
    private javax.swing.JFormattedTextField jTextCep;
    private javax.swing.JTextField jTextCidade;
    private javax.swing.JFormattedTextField jTextCpf;
    private javax.swing.JTextField jTextEmail;
    private javax.swing.JTextField jTextEndereco;
    private javax.swing.JTextField jTextNome;
    private javax.swing.JFormattedTextField jTextRg;
    private javax.swing.JFormattedTextField jTextTelefoneFixo;
    // End of variables declaration//GEN-END:variables

    private boolean emptyFields() {
        boolean empty = true;

        if (jTextNome.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Nome não pode ser vazio.");
        } else if (jTextTelefoneFixo.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Telefone Fixo não pode ser vazio.");
        } else if (jTextCelular.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Celular não pode ser vazio.");
        } else if (jTextCep.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! CEP não pode ser vazio.");
        } else if (jTextCpf.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! CPF não pode ser vazio.");
        } else if (jTextRg.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! RG não pode ser vazio.");
        } else if (jTextEndereco.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Endereço não pode ser vazio.");
        } else if (jTextBairro.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Bairro não pode ser vazio.");
        } else if (jTextCidade.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Cidade não pode ser vazio.");
        } else {
            empty = false;
        }

        return empty;
    }

    // Método para obter conexão ao banco de dados
    private Connection getConnection() {
        String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
        String user = "root";
        String password = "T#7aB3$0m2@i";
        try {
            return DriverManager.getConnection(url, user, password);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao conectar ao banco de dados: " + e.getMessage());
            throw new RuntimeException("Erro ao conectar ao banco de dados.", e); // Propaga a exceção
        }
    }

// Verifica se o cliente já existe no banco de dados com base no CPF
    private boolean clienteExiste(String cpf) throws SQLException {
        String sql = "SELECT COUNT(*) FROM cliente WHERE cpf = ?";
        try ( Connection conn = getConnection();  PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, cpf);
            try ( ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0; // Retorna true se o cliente já existir
                }
            }
        }
        return false;
    }

// Carrega os dados da tabela cliente
    private void loadData() {
        String sql = "SELECT c.idcliente, c.nome, c.cpf, c.rg, c.telefone_fixo, c.celular, c.email, "
                + "e.endereco, e.bairro, e.cep, e.cidade "
                + "FROM cliente c "
                + "JOIN endereco e ON c.endereco_idendereco = e.idendereco";

        try ( Connection conn = getConnection();  PreparedStatement ps = conn.prepareStatement(sql);  ResultSet rs = ps.executeQuery()) {

            tableModel.setRowCount(0); // Limpa qualquer dado existente na tabela
            int rowCount = 0; // Contador de linhas adicionadas
            while (rs.next()) {
                Object[] rowData = new Object[11];
                rowData[0] = rs.getInt("idcliente");
                rowData[1] = rs.getString("nome");
                rowData[2] = rs.getString("cpf");
                rowData[3] = rs.getString("rg");
                rowData[4] = rs.getString("telefone_fixo");
                rowData[5] = rs.getString("celular");
                rowData[6] = rs.getString("email");
                rowData[7] = rs.getString("endereco");
                rowData[8] = rs.getString("bairro");
                rowData[9] = rs.getString("cep");
                rowData[10] = rs.getString("cidade");

                tableModel.addRow(rowData);
                rowCount++;
            }
            System.out.println("Dados carregados com sucesso. Total de registros: " + rowCount);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar os dados: " + e.getMessage());
        }
    }

// Obtém os dados do cliente preenchidos no formulário
    private Cliente getCliente() {
        if (!emptyFields()
                && validarTelefone(jTextTelefoneFixo.getText())
                && validarTelefone(jTextCelular.getText())
                && validarCPF(jTextCpf.getText())
                && validarRG(jTextRg.getText())) {

            Cliente cliente = new Cliente();
            cliente.setNome(jTextNome.getText());
            cliente.setCpf(jTextCpf.getText());
            cliente.setRg(jTextRg.getText());
            cliente.setTelefoneFixo(jTextTelefoneFixo.getText());
            cliente.setCelular(jTextCelular.getText());
            cliente.setEmail(jTextEmail.getText());
            cliente.setEndereco(jTextEndereco.getText());
            cliente.setBairro(jTextBairro.getText());
            cliente.setCep(jTextCep.getText());
            cliente.setCidade(jTextCidade.getText());

            JOptionPane.showMessageDialog(null, """
            Os seguintes dados foram cadastrados com sucesso:
            Nome: """ + jTextNome.getText()
                    + "\nCPF: " + jTextCpf.getText()
                    + "\nRG: " + jTextRg.getText()
                    + "\nTelefone Fixo: " + jTextTelefoneFixo.getText()
                    + "\nCelular: " + jTextCelular.getText()
                    + "\nEmail: " + jTextEmail.getText()
                    + "\nEndereço: " + jTextEndereco.getText()
                    + "\nBairro: " + jTextBairro.getText()
                    + "\nCEP: " + jTextCep.getText()
                    + "\nCidade: " + jTextCidade.getText()
            );
            return cliente;
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, preencha todos os campos corretamente.");
        }
        return null;
    }

// Inserir cliente no banco de dados com verificação de duplicidade
    private void inserirCliente(Cliente cliente) {
        try ( Connection conn = getConnection()) {
            // Verifica se o cliente já existe com base no CPF
            if (clienteExiste(cliente.getCpf())) {
                JOptionPane.showMessageDialog(null, "Cliente com o CPF " + cliente.getCpf() + " já está cadastrado.");
                return; // Sai do método para evitar a inserção duplicada
            }

            int enderecoId = getEnderecoId(cliente.getEndereco(), cliente.getBairro(), cliente.getCep(), cliente.getCidade());

            String sql = "INSERT INTO Cliente (nome, cpf, rg, telefone_fixo, celular, email, endereco_idendereco) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?)";
            try ( PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                ps.setString(1, cliente.getNome());
                ps.setString(2, cliente.getCpf());
                ps.setString(3, cliente.getRg());
                ps.setString(4, cliente.getTelefoneFixo());
                ps.setString(5, cliente.getCelular());
                ps.setString(6, cliente.getEmail());
                ps.setInt(7, enderecoId);

                int affectedRows = ps.executeUpdate();
                if (affectedRows > 0) {
                    try ( ResultSet generatedKeys = ps.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            cliente.setIdCliente(generatedKeys.getInt(1));
                            listaClientes.add(cliente);
                            atualizarTabela();
                            JOptionPane.showMessageDialog(null, "Cliente cadastrado com sucesso!");
                        }
                    }
                } else {
                    throw new SQLException("Falha ao cadastrar cliente, nenhuma linha foi afetada.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao inserir o cliente no banco de dados: " + e.getMessage());
        }
    }

// Obtém o ID do endereço existente ou insere um novo, se necessário
    private int getEnderecoId(String endereco, String bairro, String cep, String cidade) throws SQLException {
        try ( Connection conn = getConnection()) {
            String sql = "SELECT idendereco FROM endereco WHERE endereco = ? AND bairro = ? AND cep = ? AND cidade = ?";
            try ( PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, endereco);
                ps.setString(2, bairro);
                ps.setString(3, cep);
                ps.setString(4, cidade);
                try ( ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        return rs.getInt("idendereco");
                    }
                }
            }
        }
        return inserirNovoEndereco(endereco, bairro, cep, cidade);
    }

// Insere novo endereço e retorna o ID
    private int inserirNovoEndereco(String endereco, String bairro, String cep, String cidade) throws SQLException {
        try ( Connection conn = getConnection()) {
            String sql = "INSERT INTO endereco (endereco, bairro, cep, cidade) VALUES (?, ?, ?, ?)";
            try ( PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                ps.setString(1, endereco);
                ps.setString(2, bairro);
                ps.setString(3, cep);
                ps.setString(4, cidade);
                ps.executeUpdate();
                try ( ResultSet generatedKeys = ps.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        return generatedKeys.getInt(1); // Retorna o ID gerado
                    }
                }
            }
        }
        throw new SQLException("Falha ao inserir novo endereço.");
    }

// Atualiza a tabela de clientes
    private void atualizarTabela() {
        loadData(); // Reutilizando a função para carregar os dados
    }

// Salva registros em arquivo
    private void salvarRegistrosEmArquivo(String nomeArquivo) {
        try ( BufferedWriter writer = new BufferedWriter(new FileWriter(nomeArquivo))) {
            writer.write("ID do Cliente, Nome, CPF, RG, Telefone Fixo, Celular, Email, Endereço, Bairro, CEP, Cidade");
            writer.newLine();
            for (Cliente cliente : listaClientes) {
                writer.write(cliente.getIdCliente() + ","
                        + cliente.getNome() + ","
                        + cliente.getCpf() + ","
                        + cliente.getRg() + ","
                        + cliente.getTelefoneFixo() + ","
                        + cliente.getCelular() + ","
                        + cliente.getEmail() + ","
                        + cliente.getEndereco() + ","
                        + cliente.getBairro() + ","
                        + cliente.getCep() + ","
                        + cliente.getCidade());
                writer.newLine();
            }
            JOptionPane.showMessageDialog(null, "Registros salvos com sucesso em " + nomeArquivo);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar registros em arquivo: " + e.getMessage());
        }
    }

// Validação de formatos
    private boolean validarTelefone(String telefone) {
        String regex = "\\(\\d{2}\\)\\d{4}-\\d{4}|\\(\\d{2}\\)\\d{5}-\\d{4}";
        return Pattern.matches(regex, telefone);
    }

    private boolean validarCPF(String cpf) {
        if (!cpf.matches("\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}")) {
            JOptionPane.showMessageDialog(null, "Formato do CPF inválido. Use o formato XXX.XXX.XXX-XX.");
            return false;
        }
        return true;
    }

    private boolean validarRG(String rg) {
        if (!rg.matches("\\d{2}\\.\\d{3}\\.\\d{3}-\\d{1}")) {
            JOptionPane.showMessageDialog(null, "Formato do RG inválido. Use o formato XX.XXX.XXX-X.");
            return false;
        }
        return true;
    }
}
