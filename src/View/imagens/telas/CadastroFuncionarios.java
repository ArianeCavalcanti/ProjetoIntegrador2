package View.imagens.telas;

import Classes.Funcionario;
import Classes.Funcionario.FuncionarioService;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author arian
 */
public class CadastroFuncionarios extends javax.swing.JFrame {

    private final String[] tableColumns = {"ID Funcionário", "Nome", "Data de Nascimento", "CPF", "RG", "Telefone Fixo", "Celular", "Email", "Endereço", "Bairro", "CEP", "Cidade"};
    DefaultTableModel tableModel = new DefaultTableModel(tableColumns, 0);
    private final ArrayList<Funcionario> listaFuncionarios = new ArrayList<>();

    public CadastroFuncionarios() {
        initComponents();
        geraAcessbilidade();
        loadData();
        jTableFuncionario.setModel(tableModel);
        setTitle("Cadastro de Funcionários");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    private void geraAcessbilidade() {

        // Definindo atalhos para botões
        jButtonSalvar.setMnemonic(KeyEvent.VK_S);
        jButtonLimpar.setMnemonic(KeyEvent.VK_L);
        jButtonPesquisar.setMnemonic(KeyEvent.VK_P);
        jButtonExcluir.setMnemonic(KeyEvent.VK_E);
        jButtonVoltar.setMnemonic(KeyEvent.VK_V);

        // Adicionando tooltips com informações dos atalhos
        jButtonSalvar.setToolTipText("Salvar (Alt+S)");
        jButtonLimpar.setToolTipText("Limpar (Alt+L)");
        jButtonPesquisar.setToolTipText("Limpar (Alt+L)");
        jButtonExcluir.setToolTipText("Excluir (Alt+E)");
        jButtonVoltar.setToolTipText("Sair (Alt+V)");

        // Adicionando tooltips aos campos de texto
        jTextNome.setToolTipText("Insira o nome do cliente");
        jTextDataNascimento.setToolTipText("Insira a data de nascimento do cliente ");
        jTextCpf.setToolTipText("Insira o CPF(XXX.XXX.XXX-XX) do cliente ");
        jTextRg.setToolTipText("Insira o Rg (XX.XXX.XXX-X) do Cliente");
        jTextTelefoneFixo.setToolTipText("Insira o telefone((XX)XXXX-XXXX) fixo do cliente");
        jTextCelular.setToolTipText("Insira o celular (XX)XXXXX-XXXX do cliente");
        jTextEmail.setToolTipText("Insira o email do cliente");
        jTextEndereco.setToolTipText("Insira o endereço do cliente");
        jTextBairro.setToolTipText("Insira o bairro do cliente");
        jTextCep.setToolTipText("Insira o CEP do cliente");

        // Definindo a ordem de foco
        jTextNome.setNextFocusableComponent(jTextDataNascimento);
        jTextDataNascimento.setNextFocusableComponent(jTextCpf);
        jTextCpf.setNextFocusableComponent(jTextRg);
        jTextRg.setNextFocusableComponent(jTextTelefoneFixo);
        jTextTelefoneFixo.setNextFocusableComponent(jTextCelular);
        jTextCelular.setNextFocusableComponent(jTextEmail);
        jTextEmail.setNextFocusableComponent(jTextEndereco);
        jTextEndereco.setNextFocusableComponent(jTextBairro);
        jTextBairro.setNextFocusableComponent(jTextCep);
        jTextCep.setNextFocusableComponent(jTextCidade);
        jTextCidade.setNextFocusableComponent(jButtonSalvar);
        jButtonSalvar.setNextFocusableComponent(jButtonLimpar);
        jButtonLimpar.setNextFocusableComponent(jButtonPesquisar);
        jButtonPesquisar.setNextFocusableComponent(jButtonExcluir);
        jButtonExcluir.setNextFocusableComponent(jButtonVoltar);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextNome = new javax.swing.JTextField();
        jTextEndereco = new javax.swing.JTextField();
        jTextBairro = new javax.swing.JTextField();
        jTextEmail = new javax.swing.JTextField();
        jTextCidade = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextDataNascimento = new javax.swing.JFormattedTextField();
        jTextCpf = new javax.swing.JFormattedTextField();
        jTextRg = new javax.swing.JFormattedTextField();
        jTextTelefoneFixo = new javax.swing.JFormattedTextField();
        jTextCelular = new javax.swing.JFormattedTextField();
        jTextCep = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableFuncionario = new javax.swing.JTable();
        jButtonSalvar = new javax.swing.JButton();
        jButtonLimpar = new javax.swing.JButton();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonExcluir = new javax.swing.JButton();
        jButtonVoltar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cadastro de Funcionários", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18), new java.awt.Color(51, 102, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dados Pessoais", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 0, 14), new java.awt.Color(255, 51, 51))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel2.setText("Nome :");

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel3.setText("CPF:");

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel5.setText("Endereço:");

        jLabel6.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel6.setText("Bairro:");

        jLabel7.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel7.setText("RG:");

        jLabel8.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel8.setText("CEP:");

        jLabel9.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel9.setText("Telefone Fixo:");

        jLabel10.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel10.setText("Celular:");

        jLabel11.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel11.setText("Email:");

        jLabel12.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel12.setText("Cidade:");

        jTextNome.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNomeActionPerformed(evt);
            }
        });

        jTextEndereco.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jTextBairro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jTextEmail.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jTextCidade.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCidadeActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel14.setText("Data de Nascimento:");

        try {
            jTextDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTextCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTextRg.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###-#")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTextTelefoneFixo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTextCelular.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            jTextCep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("######-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jTextEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(381, 381, 381)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(608, 608, 608)
                                .addComponent(jTextBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextTelefoneFixo, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(jTextCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextCep, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel12)
                        .addGap(26, 26, 26)
                        .addComponent(jTextCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jTextCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7)
                                .addGap(28, 28, 28)
                                .addComponent(jTextRg))
                            .addComponent(jTextNome, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(25, 25, 25))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jTextDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel7)
                        .addComponent(jTextRg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jTextEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextTelefoneFixo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel12)
                    .addComponent(jTextCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextCep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(98, 98, 98))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 970, 270));

        jTableFuncionario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Funcionários", "Nome", "Data de Nascimento", "CPF", "RG", "Telefone Fixo", "Celular", "Email", "Endereço", "Bairro", "CEP", "Cidade"
            }
        ));
        jScrollPane3.setViewportView(jTableFuncionario);

        jTabbedPane1.addTab("Funcionários", jScrollPane3);

        jScrollPane1.setViewportView(jTabbedPane1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 380, 1170, 360));

        jButtonSalvar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonSalvar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonSalvar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 340, 150, 30));

        jButtonLimpar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonLimpar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonLimpar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonLimpar.setText("Limpar");
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonLimpar, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 340, 150, 30));

        jButtonPesquisar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonPesquisar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonPesquisar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonPesquisar, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 340, 170, 30));

        jButtonExcluir.setBackground(new java.awt.Color(226, 218, 218));
        jButtonExcluir.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonExcluir.setForeground(new java.awt.Color(41, 83, 241));
        jButtonExcluir.setText("Excluir");
        jButtonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonExcluir, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 340, 160, 30));

        jButtonVoltar.setBackground(new java.awt.Color(226, 218, 218));
        jButtonVoltar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jButtonVoltar.setForeground(new java.awt.Color(41, 83, 241));
        jButtonVoltar.setText("Voltar");
        jButtonVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVoltarActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 340, 140, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/imagens/telas/fundo de tela.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 1230, 740));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextNomeActionPerformed

    private void jTextCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCidadeActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed

        if (!emptyFields()) {
            Funcionario funcionario = getFuncionario();
            if (funcionario != null) {
                System.out.println("Funcionário válido: " + funcionario);
                inserirFuncionario(funcionario);
                salvarRegistrosEmArquivo("registros.csv");

                // Limpa os campos após o salvamento
                jTextNome.setText("");
                jTextDataNascimento.setText("");
                jTextCpf.setText("");
                jTextRg.setText("");
                jTextTelefoneFixo.setText("");
                jTextCelular.setText("");
                jTextEmail.setText("");
                jTextEndereco.setText("");
                jTextBairro.setText("");
                jTextCep.setText("");
                jTextCidade.setText("");

                jTextNome.requestFocus();
            }
        }

    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed

        jTextNome.setText("");
        jTextDataNascimento.setText("");
        jTextCpf.setText("");
        jTextRg.setText("");
        jTextTelefoneFixo.setText("");
        jTextCelular.setText("");
        jTextEmail.setText("");
        jTextEndereco.setText("");
        jTextBairro.setText("");
        jTextCep.setText("");
        jTextCidade.setText("");

        jTextNome.requestFocus();

    }//GEN-LAST:event_jButtonLimparActionPerformed

    @SuppressWarnings("empty-statement")
    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed

        // Exibe uma caixa de diálogo para o usuário digitar o nome do funcionário
    String filtroFuncionario = JOptionPane.showInputDialog(null, "Digite o nome do funcionário que deseja pesquisar:");

    if (filtroFuncionario != null && !filtroFuncionario.trim().isEmpty()) {
        try {
            // Conexão com o banco de dados
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/distribuidora_de_agua", "root", "T#7aB3$0m2@i");

            // Preparar a consulta SQL para buscar funcionários pelo nome
            String sql = "SELECT f.idfuncionario, f.nome, f.data_nascimento, f.cpf, f.rg, f.telefone_fixo, f.celular, f.email, "
                    + "e.endereco, e.bairro, e.cep, e.cidade "
                    + "FROM funcionario f "
                    + "JOIN endereco e ON f.endereco_idendereco = e.idendereco "
                    + "WHERE f.nome LIKE ?";

            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, "%" + filtroFuncionario.trim() + "%");  // Usar LIKE para buscar parcialmente

            ResultSet rs = ps.executeQuery();

            // Obter o modelo da tabela para preencher os dados
            DefaultTableModel model = (DefaultTableModel) jTableFuncionario.getModel();
            model.setRowCount(0);  // Limpa a tabela antes de adicionar os novos dados

            if (!rs.next()) {  // Verifica se o ResultSet está vazio
                JOptionPane.showMessageDialog(null, "Nenhum funcionário encontrado para o nome informado!");
            } else {
                // Se houver resultados, adicionar ao modelo da tabela
                do {
                    Object[] rowData = new Object[12];  // Agora com 12 colunas
                    rowData[0] = rs.getInt("idfuncionario");    // ID Funcionário
                    rowData[1] = rs.getString("nome");          // Nome Funcionário
                    rowData[2] = rs.getDate("data_nascimento"); // Data de Nascimento
                    rowData[3] = rs.getString("cpf");           // CPF
                    rowData[4] = rs.getString("rg");            // RG
                    rowData[5] = rs.getString("telefone_fixo"); // Telefone Fixo
                    rowData[6] = rs.getString("celular");       // Celular
                    rowData[7] = rs.getString("email");         // Email
                    rowData[8] = rs.getString("endereco");      // Endereço
                    rowData[9] = rs.getString("bairro");        // Bairro
                    rowData[10] = rs.getString("cep");          // CEP
                    rowData[11] = rs.getString("cidade");       // Cidade

                    // Adicionar a linha ao modelo da tabela
                    model.addRow(rowData);
                } while (rs.next());
            }

            // Fechar a consulta e a conexão
            ps.close();
            conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao buscar funcionários: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, insira o nome de um funcionário para filtrar.");
    }

    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jButtonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirActionPerformed

        // Obter a linha selecionada na tabela
        int rowIndex = jTableFuncionario.getSelectedRow();

        // Verificar se há uma linha selecionada
        if (rowIndex >= 0) {
            // Confirmar a exclusão
            String[] options = {"Sim", "Não"};
            int deletar = JOptionPane.showOptionDialog(
                    rootPane,
                    "Tem certeza que deseja excluir o registro?",
                    "Exclusão de Registro de Funcionário",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            // Se o usuário confirmar a exclusão
            if (deletar == 0) {
                // Obter o ID do funcionário da tabela
                String idString = jTableFuncionario.getValueAt(rowIndex, 0).toString();
                int funcionarioId = Integer.parseInt(idString);

                String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
                String user = "root";
                String password = "T#7aB3$0m2@i";

                try ( Connection connection = DriverManager.getConnection(url, user, password)) {
                    // Desativar o autocommit para gerenciar transações
                    connection.setAutoCommit(false);

                    // Excluir os itens de venda associados às vendas do funcionário
                    String sqlItensVenda = "DELETE FROM produto_itens WHERE venda_idvenda IN (SELECT idvenda FROM Venda WHERE funcionario_idfuncionario = ?)";
                    try ( PreparedStatement statementItensVenda = connection.prepareStatement(sqlItensVenda)) {
                        statementItensVenda.setInt(1, funcionarioId);
                        statementItensVenda.executeUpdate();
                    }

                    // Excluir as vendas associadas ao funcionário
                    String sqlVenda = "DELETE FROM Venda WHERE funcionario_idfuncionario = ?";
                    try ( PreparedStatement statementVenda = connection.prepareStatement(sqlVenda)) {
                        statementVenda.setInt(1, funcionarioId);
                        statementVenda.executeUpdate();
                    }

                    // Obter o ID do endereço associado ao funcionário
                    String sqlObterEndereco = "SELECT endereco_idendereco FROM Funcionario WHERE idfuncionario = ?";
                    int enderecoId = -1;
                    try ( PreparedStatement statementObterEndereco = connection.prepareStatement(sqlObterEndereco)) {
                        statementObterEndereco.setInt(1, funcionarioId);
                        try ( ResultSet rs = statementObterEndereco.executeQuery()) {
                            if (rs.next()) {
                                enderecoId = rs.getInt("endereco_idendereco");
                            }
                        }
                    }

                    // Excluir o funcionário da tabela Funcionario
                    String sqlFuncionario = "DELETE FROM Funcionario WHERE idfuncionario = ?";
                    try ( PreparedStatement statementFuncionario = connection.prepareStatement(sqlFuncionario)) {
                        statementFuncionario.setInt(1, funcionarioId);
                        int affectedRows = statementFuncionario.executeUpdate();

                        if (affectedRows > 0 && enderecoId != -1) {
                            // Excluir o endereço associado ao funcionário
                            String sqlEndereco = "DELETE FROM Endereco WHERE idendereco = ?";
                            try ( PreparedStatement statementEndereco = connection.prepareStatement(sqlEndereco)) {
                                statementEndereco.setInt(1, enderecoId);
                                statementEndereco.executeUpdate();
                            }

                            // Confirma a transação
                            connection.commit();

                            JOptionPane.showMessageDialog(rootPane, "Funcionário excluído com sucesso.");

                            // Atualizar a tabela para refletir a exclusão
                            atualizarTabela();
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Erro ao excluir funcionário.");
                            connection.rollback();  // Reverter se algo der errado
                        }
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, "Erro ao excluir funcionário: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Selecione um funcionário para excluir.");

        }
    }//GEN-LAST:event_jButtonExcluirActionPerformed

    private void jButtonVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVoltarActionPerformed

        MenuPrincipal menuPrincipal = new MenuPrincipal();
        menuPrincipal.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_jButtonVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroFuncionarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CadastroFuncionarios().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JButton jButtonVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableFuncionario;
    private javax.swing.JTextField jTextBairro;
    private javax.swing.JFormattedTextField jTextCelular;
    private javax.swing.JFormattedTextField jTextCep;
    private javax.swing.JTextField jTextCidade;
    private javax.swing.JFormattedTextField jTextCpf;
    private javax.swing.JFormattedTextField jTextDataNascimento;
    private javax.swing.JTextField jTextEmail;
    private javax.swing.JTextField jTextEndereco;
    private javax.swing.JTextField jTextNome;
    private javax.swing.JFormattedTextField jTextRg;
    private javax.swing.JFormattedTextField jTextTelefoneFixo;
    // End of variables declaration//GEN-END:variables

    private boolean emptyFields() {
        StringBuilder message = new StringBuilder();

        if (jTextNome.getText().trim().isEmpty()) {
            message.append("Nome não pode ser vazio.\n");
        }
        if (jTextTelefoneFixo.getText().trim().isEmpty()) {
            message.append("Telefone Fixo não pode ser vazio.\n");
        }
        if (jTextCelular.getText().trim().isEmpty()) {
            message.append("Celular não pode ser vazio.\n");
        }
        if (jTextCep.getText().trim().isEmpty()) {
            message.append("CEP não pode ser vazio.\n");
        }
        if (jTextCpf.getText().trim().isEmpty()) {
            message.append("CPF não pode ser vazio.\n");
        }
        if (jTextRg.getText().trim().isEmpty()) {
            message.append("RG não pode ser vazio.\n");
        }
        if (jTextEndereco.getText().trim().isEmpty()) {
            message.append("Endereço não pode ser vazio.\n");
        }
        if (jTextBairro.getText().trim().isEmpty()) {
            message.append("Bairro não pode ser vazio.\n");
        }
        if (jTextCidade.getText().trim().isEmpty()) {
            message.append("Cidade não pode ser vazio.\n");
        }

        if (message.length() > 0) {
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO!\n" + message.toString());
            return true;
        }
        return false;
    }

// Método para obter conexão ao banco de dados
    private Connection getConnection() {
        String url = "jdbc:mysql://localhost:3306/distribuidora_de_agua";
        String user = "root";
        String password = "T#7aB3$0m2@i";
        try {
            return DriverManager.getConnection(url, user, password);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao conectar ao banco de dados: " + e.getMessage());
            throw new RuntimeException("Erro ao conectar ao banco de dados.", e);
        }
    }

// Verifica se o funcionário já existe no banco de dados com base no CPF
    private boolean funcionarioExiste(String cpf) throws SQLException {
        String sql = "SELECT COUNT(*) FROM funcionario WHERE cpf = ?";
        try ( Connection conn = getConnection();  PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, cpf);
            try ( ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0; // Retorna true se o funcionário já existir
                }
            }
        }
        return false;
    }

// Carrega os dados da tabela funcionário
    private void loadData() {
        String sql = "SELECT f.idfuncionario, f.nome, f.data_nascimento, f.cpf, f.rg, f.telefone_fixo, f.celular, f.email, "
                + "e.endereco, e.bairro, e.cep, e.cidade "
                + "FROM funcionario f "
                + "JOIN endereco e ON f.endereco_idendereco = e.idendereco";

        try ( Connection conn = getConnection();  PreparedStatement ps = conn.prepareStatement(sql);  ResultSet rs = ps.executeQuery()) {

            tableModel.setRowCount(0); // Limpa qualquer dado existente na tabela
            while (rs.next()) {
                Object[] rowData = new Object[12]; // Ajuste o tamanho do array para 12
                rowData[0] = rs.getInt("idfuncionario");
                rowData[1] = rs.getString("nome");
                rowData[2] = rs.getDate("data_nascimento");
                rowData[3] = rs.getString("cpf");
                rowData[4] = rs.getString("rg");
                rowData[5] = rs.getString("telefone_fixo");
                rowData[6] = rs.getString("celular");
                rowData[7] = rs.getString("email");
                rowData[8] = rs.getString("endereco");
                rowData[9] = rs.getString("bairro");
                rowData[10] = rs.getString("cep");
                rowData[11] = rs.getString("cidade");

                tableModel.addRow(rowData);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar os dados: " + e.getMessage());
        }
    }

    private Funcionario getFuncionario() {
        if (!emptyFields()
                && validarTelefone(jTextTelefoneFixo.getText())
                && validarTelefone(jTextCelular.getText())
                && validarCPF(jTextCpf.getText())
                && validarRG(jTextRg.getText())) {

            Funcionario funcionario = new Funcionario();
            funcionario.setNome(jTextNome.getText());
            funcionario.setDataNascimento(parseDate(jTextDataNascimento.getText()));
            funcionario.setCpf(jTextCpf.getText());
            funcionario.setRg(jTextRg.getText());
            funcionario.setTelefoneFixo(jTextTelefoneFixo.getText());
            funcionario.setCelular(jTextCelular.getText());
            funcionario.setEmail(jTextEmail.getText());
            funcionario.setEndereco(jTextEndereco.getText());
            funcionario.setBairro(jTextBairro.getText());
            funcionario.setCep(jTextCep.getText());
            funcionario.setCidade(jTextCidade.getText());

            return funcionario;
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, preencha todos os campos corretamente.");
        }
        return null;
    }

    private int getUsuarioId() {
        return 1;
    }

    private void inserirFuncionario(Funcionario funcionario) {
        try ( Connection conn = getConnection()) {
            if (funcionarioExiste(funcionario.getCpf())) {
                JOptionPane.showMessageDialog(null, "Funcionário com o CPF " + funcionario.getCpf() + " já está cadastrado.");
                return;
            }

            // Obtém o ID do endereço (ou insere um novo)
            int enderecoId = getEnderecoId(funcionario.getEndereco(), funcionario.getBairro(), funcionario.getCep(), funcionario.getCidade());

            // Obtém o ID do usuário automaticamente (sem necessidade de exibir na tela)
            int usuarioId = getUsuarioId();

            String sql = "INSERT INTO funcionario (nome, data_nascimento, cpf, rg, telefone_fixo, celular, email, endereco_idendereco, usuario_idusuario) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            try ( PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                ps.setString(1, funcionario.getNome());
                ps.setDate(2, new java.sql.Date(funcionario.getDataNascimento().getTime()));
                ps.setString(3, funcionario.getCpf());
                ps.setString(4, funcionario.getRg());
                ps.setString(5, funcionario.getTelefoneFixo());
                ps.setString(6, funcionario.getCelular());
                ps.setString(7, funcionario.getEmail());
                ps.setInt(8, enderecoId);
                ps.setInt(9, usuarioId); // Insere o ID do usuário automaticamente

                int affectedRows = ps.executeUpdate();
                if (affectedRows > 0) {
                    try ( ResultSet generatedKeys = ps.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            funcionario.setIdFuncionario(generatedKeys.getInt(1));
                            atualizarTabela();
                            JOptionPane.showMessageDialog(null, "Funcionário cadastrado com sucesso!");
                        }
                    }
                } else {
                    throw new SQLException("Falha ao cadastrar funcionário, nenhuma linha foi afetada.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao inserir o funcionário no banco de dados: " + e.getMessage());
        }
    }

// Obtém o ID do endereço existente ou insere um novo, se necessário
    private int getEnderecoId(String endereco, String bairro, String cep, String cidade) throws SQLException {
        try ( Connection conn = getConnection()) {
            String sql = "SELECT idendereco FROM endereco WHERE endereco = ? AND bairro = ? AND cep = ? AND cidade = ?";
            try ( PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, endereco);
                ps.setString(2, bairro);
                ps.setString(3, cep);
                ps.setString(4, cidade);
                try ( ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        return rs.getInt("idendereco");
                    }
                }
            }
        }
        return inserirNovoEndereco(endereco, bairro, cep, cidade);
    }

// Insere novo endereço e retorna o ID
    private int inserirNovoEndereco(String endereco, String bairro, String cep, String cidade) throws SQLException {
        try ( Connection conn = getConnection()) {
            String sql = "INSERT INTO endereco (endereco, bairro, cep, cidade) VALUES (?, ?, ?, ?)";
            try ( PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                ps.setString(1, endereco);
                ps.setString(2, bairro);
                ps.setString(3, cep);
                ps.setString(4, cidade);
                ps.executeUpdate();
                try ( ResultSet generatedKeys = ps.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        return generatedKeys.getInt(1);
                    }
                }
            }
        }
        throw new SQLException("Falha ao inserir novo endereço.");
    }

// Atualiza a tabela de funcionários
    private void atualizarTabela() {
        loadData();
    }

// Método para converter String para Date
    private Date parseDate(String dateString) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        try {
            return sdf.parse(dateString);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Data inválida. Use o formato dd/MM/yyyy.");
            return null;
        }
    }
// Salva registros de funcionários em arquivo

    private void salvarRegistrosEmArquivo(String nomeArquivo) {
        try ( BufferedWriter writer = new BufferedWriter(new FileWriter(nomeArquivo))) {
            writer.write("ID do Funcionário, Nome, Data de Nascimento, CPF, RG, Telefone Fixo, Celular, Email, Endereço, Bairro, CEP, Cidade");
            writer.newLine();
            for (Funcionario funcionario : FuncionarioService.listarTodos()) {
                writer.write(funcionario.getIdFuncionario() + ","
                        + funcionario.getNome() + ","
                        + funcionario.getDataNascimento() + ","
                        + funcionario.getCpf() + ","
                        + funcionario.getRg() + ","
                        + funcionario.getTelefoneFixo() + ","
                        + funcionario.getCelular() + ","
                        + funcionario.getEmail() + ","
                        + funcionario.getEndereco() + ","
                        + funcionario.getBairro() + ","
                        + funcionario.getCep() + ","
                        + funcionario.getCidade());
                writer.newLine();
            }
            JOptionPane.showMessageDialog(null, "Registros de funcionários salvos com sucesso em " + nomeArquivo);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar registros em arquivo: " + e.getMessage());
        }
    }

    // Validação de formatos
    private boolean validarTelefone(String telefone) {
        String regex = "\\(\\d{2}\\)\\d{4}-\\d{4}|\\(\\d{2}\\)\\d{5}-\\d{4}";
        return Pattern.matches(regex, telefone);
    }

    private boolean validarCPF(String cpf) {
        if (!cpf.matches("\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}")) {
            JOptionPane.showMessageDialog(null, "Formato do CPF inválido. Use o formato XXX.XXX.XXX-XX.");
            return false;
        }
        return true;
    }

    private boolean validarRG(String rg) {
        if (!rg.matches("\\d{2}\\.\\d{3}\\.\\d{3}-\\d{1}")) {
            JOptionPane.showMessageDialog(null, "Formato do RG inválido. Use o formato XX.XXX.XXX-X.");
            return false;
        }
        return true;
    }

}
